[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RNA editing report website",
    "section": "",
    "text": "flowchart TB\n  \n \n  \n  A[(Raw data)] --- t1(01.Cleaning notebook) \n  t1 --> B[(Cleaned data)]\n  B --- t2(02A.COTAN analysis src)  --> C[(COTAN obj)]\n  \n  C --- t3(03.COTAN clustering src) --> D[(Clustered COTAN obj)] \n  \n  \n  t3 --> CD[(Seurat obj with COTAN cl.)]\n  \n  CD --> t5(Data exploration + Markers +cluster identification notebook) \n  \n  D --> t5\n  \n  t5 --> G[(Seurat obj with cell id)]\n  t5 --> H[(COTAN obj with cell id)]\n  \n  G -->  t6(Exploration & Conclusion notebook) \n  H --> t6\n  \n  \n  classDef src fill:#66cc33;\n  classDef notebook fill:#cc99ff;\n  \n  class t1,t5,t6 notebook;\n  class t2,t3,t4 src;\n\n\n\n\n\n\n\n\n\nNOTE: in the Crohn disease data set the epithelial cells are already dropped."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "IBD/results/01A_Seurat_import_clean.html",
    "href": "IBD/results/01A_Seurat_import_clean.html",
    "title": "IBD pooled dataset cleaning",
    "section": "",
    "text": "library(stringr)\nlibrary(Seurat)\n\nAttaching SeuratObject\n\n\nAttaching sp\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(RColorBrewer)"
  },
  {
    "objectID": "IBD/results/01A_Seurat_import_clean.html#cell-cycle-score",
    "href": "IBD/results/01A_Seurat_import_clean.html#cell-cycle-score",
    "title": "IBD pooled dataset cleaning",
    "section": "Cell cycle score",
    "text": "Cell cycle score\nA list of cell cycle markers, from Tirosh et al, 2015, is loaded with Seurat. We can segregate this list into markers of G2/M phase and markers of S phase\n\ns.genes <- cc.genes.updated.2019$s.genes\ns.genes <- c(s.genes,str_to_lower(s.genes))\ng2m.genes <- cc.genes.updated.2019$g2m.genes\ng2m.genes <- c(g2m.genes, str_to_lower(g2m.genes))\nsrat <- CellCycleScoring(srat, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)\n\nWarning: The following features are not present in the object: mcm5, pcna,\ntyms, fen1, mcm7, mcm4, rrm1, ung, gins2, mcm6, cdca7, dtl, prim1, uhrf1, cenpu,\nhells, rfc2, polr1b, nasp, rad51ap1, gmnn, wdr76, slbp, ccne2, ubr7, pold3,\nmsh2, atad2, rad51, rrm2, cdc45, cdc6, exo1, tipin, dscc1, blm, casp8ap2, usp1,\nclspn, pola1, chaf1b, mrpl36, e2f8, not searching for symbol synonyms\n\n\nWarning: The following features are not present in the object: PIMREG, JPT1,\nhmgb2, cdk1, nusap1, ube2c, birc5, tpx2, top2a, ndc80, cks2, nuf2, cks1b, mki67,\ntmpo, cenpf, tacc3, pimreg, smc4, ccnb2, ckap2l, ckap2, aurkb, bub1, kif11,\nanp32e, tubb4b, gtse1, kif20b, hjurp, cdca3, jpt1, cdc20, ttk, cdc25c, kif2c,\nrangap1, ncapd2, dlgap5, cdca2, cdca8, ect2, kif23, hmmr, aurka, psrc1, anln,\nlbr, ckap5, cenpe, ctcf, nek2, g2e3, gas2l3, cbx5, cenpa, not searching for\nsymbol synonyms\n\n# view cell cycle scores and phase assignments\nhead(srat[[]])\n\n                       orig.ident nCount_RNA nFeature_RNA percent.mt percent.rb\nCol_AAACCTGAGATGCGAC.1          1       4379         1199  3.3340945   45.69536\nCol_AAACCTGAGGAATTAC.1          1       4004         1417  0.7742258   37.06294\nCol_AAACCTGCAGATGGGT.1          1       5819         1969  2.6980581   34.47328\nCol_AAACCTGGTTCGGGCT.1          1       4340         1549  4.0783410   33.66359\nCol_AAACCTGGTTTGCATG.1          1       4899         1768  4.4498877   31.72076\nCol_AAACCTGTCACATGCA.1          1       3668         1352  3.1352236   36.55943\n                       RNA_snn_res.0.3 seurat_clusters     S.Score   G2M.Score\nCol_AAACCTGAGATGCGAC.1               3               3 -0.04526088 -0.06738658\nCol_AAACCTGAGGAATTAC.1               3               3 -0.06310393 -0.02992080\nCol_AAACCTGCAGATGGGT.1               3               3 -0.05474959 -0.06798010\nCol_AAACCTGGTTCGGGCT.1               3               3 -0.05709454  0.00728307\nCol_AAACCTGGTTTGCATG.1               5               5 -0.10716761 -0.05199952\nCol_AAACCTGTCACATGCA.1               3               3  0.01237206 -0.09404912\n                       Phase old.ident\nCol_AAACCTGAGATGCGAC.1    G1         3\nCol_AAACCTGAGGAATTAC.1    G1         3\nCol_AAACCTGCAGATGGGT.1    G1         3\nCol_AAACCTGGTTCGGGCT.1   G2M         3\nCol_AAACCTGGTTTGCATG.1    G1         5\nCol_AAACCTGTCACATGCA.1     S         3\n\n\n\nDimPlot(srat, reduction = \"umap\",group.by = \"Phase\")\n\n\n\n\n\nFeaturePlot(srat,features = c(\"S.Score\",\"G2M.Score\"),label.size = 4,repel = T,label = T) & \n  theme(plot.title = element_text(size=10))\n\n\n\n\n\nVlnPlot(srat,features = c(\"S.Score\",\"G2M.Score\"),group.by  = \"seurat_clusters\") & \n  theme(plot.title = element_text(size=10))\n\n\n\n\n“We suggest regressing out the difference between the G2M and S phase scores. This means that signals separating non-cycling cells and cycling cells will be maintained, but differences in cell cycle phase amongst proliferating cells (which are often uninteresting), will be regressed out of the data” From the Seurat official site.\n\nDimPlot(srat, reduction = \"pca\",group.by = \"Phase\")\n\n\n\n\n\n#srat$CC.Difference <- srat$S.Score - srat$G2M.Score\n#srat <- ScaleData(srat, vars.to.regress = \"CC.Difference\", features = rownames(srat))\n\n\nsrat <- readRDS(\"../data/02_cleaned_data/Seurat_colitis_data.RDS\")\n\n\n# Now, a PCA on the variable genes no longer returns components associated with cell cycle\nsrat <- RunPCA(srat, features = VariableFeatures(srat), nfeatures.print = 25)\n\nPC_ 1 \nPositive:  B2M, HLA-A, IFITM1, CD3E, IL32, CD3D, CD7, FYB, CD3G, CD2 \n       LCP2, CCL5, CD247, CD96, ITM2A, RARRES3, GIMAP7, ZFP36L2, HCST, SRGN \n       CST7, LAT, IL2RB, NKG7, S100A4 \nNegative:  RGS13, MEF2B, STMN1, CDCA7, KIAA0101, ELL3, TYMS, RRM2, UBE2C, CDT1 \n       TK1, NUSAP1, BIRC5, POU2AF1, MKI67, MARCKSL1, CCNA2, CDKN3, KIFC1, CCNB2 \n       UHRF1, UBE2J1, CDCA3, TOP2A, TCL1A \nPC_ 2 \nPositive:  HLA-DQA1, HLA-DRA, HLA-DPB1, CD79A, CD74, HLA-DQB1, HLA-DRB1, HLA-DPA1, MS4A1, VPREB3 \n       CD79B, CD83, FCER2, HLA-DRB5, LTB, FCRLA, KLF2, CR2, PHACTR1, TCL1A \n       CD40, IGHM, CD24, GM2A, PLD4 \nNegative:  CD3E, IL32, CD7, CD3D, CCL5, CD3G, HCST, CD247, NKG7, LCP2 \n       CD2, FYB, CD96, CST7, IL2RB, SRGN, RARRES3, GAPDH, FYN, TNFAIP3 \n       KLRD1, PRKCH, GZMM, ITM2A, ID2 \nPC_ 3 \nPositive:  TCF7, CD4, PDCD1, SPOCK2, PASK, IL6R, CD28, CD5, IL6ST, TOX2 \n       TC2N, CTLA4, CD6, ACTN1, LAT, ICOS, GPR183, MAF, CCR7, RRM2 \n       SH2D1A, GIMAP4, FBLN7, CTSB, TYMS \nNegative:  HOPX, NKG7, CCL5, KLRD1, KIR2DL4, GZMA, FCER1G, GSTP1, CD63, ITGA1 \n       GZMB, MYO1E, CST7, LGALS1, PRF1, RHOC, MEF2B, GAPDH, FASLG, CTSW \n       ID2, SH2D1B, TMIGD2, ACTG1, SERPINA9 \nPC_ 4 \nPositive:  HLA-DRB1, HLA-DPA1, FTL, HLA-DPB1, CAPG, FCER2, HLA-DQA1, HLA-DRA, RRM2, TUBA1B \n       CCNA2, TYMS, HLA-DQB1, KLF2, VIM, CDK1, ASF1B, KIFC1, KIR2DL4, PKMYT1 \n       CCL5, UBE2C, KLRD1, CD74, UHRF1 \nNegative:  CD27, PDCD1, MEF2B, PASK, SERPINA9, RGS13, TOX2, CD4, TCF7, LAT \n       CTLA4, ISG20, CORO1B, MAF, DCAF12, IL6R, FKBP5, SH2D1A, ELL3, HMCES \n       ICOS, CD28, ACTG1, TOX, IL6ST \nPC_ 5 \nPositive:  IL4I1, NFKBIA, KIT, IL23R, NR4A1, TNFRSF18, KRT86, TYROBP, ZFP36, LINC00299 \n       CD83, MAP3K8, TNFRSF4, CDKN1A, TNFSF13B, DUSP1, NR4A2, BHLHE40, PHLDA1, AREG \n       BCL2A1, KLF6, KIAA1324, FOS, FOSB \nNegative:  RPL28, GIMAP7, CD8A, GZMM, LEF1, GIMAP4, GIMAP1, CD8B, LINC00861, CD3G \n       CXCR3, CD3D, CCL5, AICDA, NELL2, CD3E, S100A10, RPLP0, FYB, CST7 \n       IFNG-AS1, SUSD3, GZMK, CD27, RPLP1 \n\nDimPlot(srat, reduction = \"pca\",group.by = \"Phase\")\n\n\n\n\n\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   3466120  185.2    5097011   272.3    5097011   272.3\nVcells 779976759 5950.8 1797224541 13711.8 1793215236 13681.2\n\nsrat <- RunUMAP(srat, dims = 1:25, verbose = F)\nDimPlot(srat, reduction = \"umap\",group.by = \"Phase\")"
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient5_NB.html",
    "href": "Crohn_disease/results/01_cleaning_patient5_NB.html",
    "title": "Cleaning notebook patient 5",
    "section": "",
    "text": "Last compiled"
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient5_NB.html#uninvolved-sample",
    "href": "Crohn_disease/results/01_cleaning_patient5_NB.html#uninvolved-sample",
    "title": "Cleaning notebook patient 5",
    "section": "Uninvolved sample",
    "text": "Uninvolved sample\n\npatient <- \"patient5_ileum\"\nmetadata <- readxl::read_excel(\"../data/tables-mmc2.xlsx\",sheet = 1)\nmetadata <- as.data.frame(metadata[metadata$Patient.ID == \"pat. 5\" & metadata$status %in% c(\"Uninvolved\"),])\nmetadata <- metadata[!is.na(metadata$Sample_ID),]\n\n\nraw.total <- NA\nfor (sample in metadata$Sample_ID) {\n  raw <- Seurat::Read10X(paste0(\"../data/01_raw_data/\",sample,\"/\"),gene.column = 2)\n  colnames(raw) <- paste0(sample,\"_\",colnames(raw))\n  raw <- raw[,!(Matrix::colSums(raw) <= 1)]\n  print(paste0(sample,\" dimension \",dim(raw)[1],\" \",dim(raw)[2]))\n  if(is.null(dim(raw.total))){\n    raw.total <- raw\n  }else{\n    if ( identical(rownames(raw),rownames(raw.total) )) {\n      raw.total <- cbind(raw.total,raw)  \n    }else{\n      print(\"Problem!\")\n      break\n    }\n    \n  }\n}\n\n[1] \"68 dimension 33694 144813\"\n\nrm(raw)\ngc()\n\n           used  (Mb) gc trigger  (Mb) max used  (Mb)\nNcells  5257764 280.8   11474400 612.8  6911483 369.2\nVcells 27121466 207.0   64100891 489.1 60348689 460.5\n\ndim(raw.total)\n\n[1]  33694 144813\n\n\nDefine output directory:\n\nroot <- \"../../Crohn_disease/\"\nout_dir <- paste0(root,\"data/02_cleaned_data/\")\nout_dir\n\n[1] \"../../Crohn_disease/data/02_cleaned_data/\"\n\n\nWe check also the genes\n\nsum(Matrix::rowSums(raw.total) <= 1)\n\n[1] 15770\n\n\nAnd drop the empty rows.\n\nraw.total <- raw.total[!(rowSums(raw.total) <= 1),]\ndim(raw.total)\n\n[1]  17924 144813\n\n\n\nobj <- methods::new(\"scCOTAN\",raw = raw.total)\n\n\ndim(obj@raw)\n\n[1]  17924 144813\n\n\n\nGeneral cleaning\nWe want to remove cell doublets or multiplets and low-quality or dying cells (with too high mtRNA percentage).\n\nBy library sizes\nFirst we check the library size (UMI number) with an empirical cumulative distribution function.\n\nECD.plot(obj,y_cut = 30)\n\n\n\n\nSo to start we drop all cell with library size lower then 30.\nThe next plot shows the library size of each cell in a violin and box plot.\n\nsizes <- Matrix::colSums(obj@raw)\n\nobj <- drop.genes.cells(object = obj,cells = names(sizes[ sizes < 30]))\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\n\n\n\nWe can subset and drop the unwanted cell by library size.\n\nsizes <- Matrix::colSums(obj@raw)\n\nobj <- drop.genes.cells(object = obj,cells = names(sizes[ sizes > 6000]))\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (geom_point).\n\n\n\n\n\n\ndim(obj@raw)\n\n[1] 17924 20699\n\n\n\n\nBy mitochondrial gene percentage\nWe will next have a look the percentage of reads coming from mitochondrial genes. This can help to drop dying cells: these cells will have a percentage of mitochondrial reads particularly high.\n\ndf <- mitochondrial.percentage.plot(obj,split.pattern = \"_\",n.col = 1,gene.prefix = \"^MT-\")\n\ndf$plot\n\n\n\n\n\nobj <- drop.genes.cells(object = obj,cells = rownames(df$sizes[df$sizes$mit.percentage > 15,]))\ndf <- mitochondrial.percentage.plot(obj,split.pattern = \"_\",n.col = 1,gene.prefix = \"^MT-\")\n\ndf$plot\n\n\n\n\nWe check again the library size plot\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (geom_point).\n\n\n\n\n\n\nECD.plot(obj,y_cut = 30)\n\n\n\n\n\n\n\nGene and library size scatter plot\n\nscatter.plot(obj = obj,split.pattern = \"[_]\",n.col = 1)\n\n\n\n\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\n\n\n\n\nuninvolved.obj <- obj"
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient5_NB.html#involved-sample",
    "href": "Crohn_disease/results/01_cleaning_patient5_NB.html#involved-sample",
    "title": "Cleaning notebook patient 5",
    "section": "Involved sample",
    "text": "Involved sample\n\nmetadata <- readxl::read_excel(\"../data/tables-mmc2.xlsx\",sheet = 1)\nmetadata <- as.data.frame(metadata[metadata$Patient.ID == \"pat. 5\" & metadata$status %in% c(\"Involved\"),])\nmetadata <- metadata[!is.na(metadata$Sample_ID),]\n\n\nraw.total <- NA\nfor (sample in metadata$Sample_ID) {\n  raw <- Seurat::Read10X(paste0(\"../data/01_raw_data/\",sample,\"/\"),gene.column = 2)\n  colnames(raw) <- paste0(sample,\"_\",colnames(raw))\n  raw <- raw[,!(Matrix::colSums(raw) <= 1)]\n  print(paste0(sample,\" dimension \",dim(raw)[1],\" \",dim(raw)[2]))\n  if(is.null(dim(raw.total))){\n    raw.total <- raw\n  }else{\n    if ( identical(rownames(raw),rownames(raw.total) )) {\n      raw.total <- cbind(raw.total,raw)  \n    }else{\n      print(\"Problem!\")\n      break\n    }\n    \n  }\n}\n\n[1] \"69 dimension 33694 103544\"\n\nrm(raw)\ngc()\n\n           used  (Mb) gc trigger  (Mb) max used  (Mb)\nNcells  5399003 288.4   11474400 612.8  9940283 530.9\nVcells 30798409 235.0   64100891 489.1 64100839 489.1\n\ndim(raw.total)\n\n[1]  33694 103544\n\n\nWe check also the genes\n\nsum(Matrix::rowSums(raw.total) <= 1)\n\n[1] 16276\n\n\nAnd drop the empty rows.\n\nraw.total <- raw.total[!(rowSums(raw.total) <= 1),]\ndim(raw.total)\n\n[1]  17418 103544\n\n\n\nobj <- methods::new(\"scCOTAN\",raw = raw.total)\n\n\ndim(obj@raw)\n\n[1]  17418 103544\n\n\n\nGeneral cleaning\nWe want to remove cell doublets or multiplets and low-quality or dying cells (with too high mtRNA percentage).\n\nBy library sizes\nFirst we check the library size (UMI number) with an empirical cumulative distribution function.\n\nECD.plot(obj,y_cut = 30)\n\n\n\n\nSo to start we drop all cell with library size lower then 20.\nThe next plot shows the library size of each cell in a violin and box plot.\n\nsizes <- Matrix::colSums(obj@raw)\n\nobj <- drop.genes.cells(object = obj,cells = names(sizes[ sizes < 30]))\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\n\n\n\nWe can subset and drop the unwanted cell by library size.\n\nsizes <- Matrix::colSums(obj@raw)\n\nobj <- drop.genes.cells(object = obj,cells = names(sizes[ sizes > 4000]))\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\n\n\n\n\ndim(obj@raw)\n\n[1] 17418  5789\n\n\n\n\nBy mitochondrial gene percentage\nWe will next have a look the percentage of reads coming from mitochondrial genes. This can help to drop dying cells: these cells will have a percentage of mitochondrial reads particularly high.\n\ndf <- mitochondrial.percentage.plot(obj,split.pattern = \"_\",n.col = 1,gene.prefix = \"^MT-\")\n\ndf$plot\n\n\n\n\n\nobj <- drop.genes.cells(object = obj,cells = rownames(df$sizes[df$sizes$mit.percentage > 10,]))\ndf <- mitochondrial.percentage.plot(obj,split.pattern = \"_\",n.col = 1,gene.prefix = \"^MT-\")\n\ndf$plot\n\n\n\n\nWe check again the library size plot\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (geom_point).\n\n\n\n\n\n\nECD.plot(obj,y_cut = 30)\n\n\n\n\n\n\n\nGene and library size scatter plot\n\nscatter.plot(obj = obj,split.pattern = \"[_]\",n.col = 1)\n\n\n\n\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\n\n\n\n\ninvolved.obj <- obj"
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient5_NB.html#cotan-specific-data-cleaning",
    "href": "Crohn_disease/results/01_cleaning_patient5_NB.html#cotan-specific-data-cleaning",
    "title": "Cleaning notebook patient 5",
    "section": "COTAN specific data cleaning",
    "text": "COTAN specific data cleaning\nFirst, we create a directory to store all information regarding the data cleaning.\n\nif(!file.exists(out_dir)){\n  dir.create(file.path(out_dir))\n}\n\nif(!file.exists(paste(out_dir,\"cleaning\", sep = \"\"))){   \n  dir.create(file.path(out_dir, \"cleaning\"))\n}\n\n\ngc()\n\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  5393116 288.1   11474400  612.8  11455978  611.9\nVcells 52568667 401.1  264321112 2016.7 274939267 2097.7\n\nttm = clean(obj)\n\n[1] \"Starting\"\n[1] \"Cells/genes selection done\"\n[1] \"Start estimation mu with linear method\"\n[1]  8529 21694\n[1] \"Start PCA\"\n[1] \"Fun linear DONE\"\n[1] \"starting hclust\"\n\n\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.4 GiB\n\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.4 GiB\n\nobj = ttm$object\n\nttm$pca.cell.2\n\n\n\n\n\nttm$genes.plot\n\nWarning: ggrepel: 13 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\nThe B group of cells is enriched in red blood cell genes so it has to be dropped.\n\nif (length(ttm$cl1) < length(ttm$cl2)) {\n  to_rem = ttm$cl1\n}else{\n  to_rem = ttm$cl2\n}\n\nobj = drop.genes.cells(object = obj,genes = c(),cells = to_rem)\ngc()\n\n            used   (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells   5435089  290.3   11474400  612.8  11455978  611.9\nVcells 494394265 3772.0  946065387 7218.0 946048143 7217.8\n\nttm = clean(obj)\n\n[1] \"Starting\"\n[1] \"Cells/genes selection done\"\n[1] \"Start estimation mu with linear method\"\n[1]  8528 21528\n[1] \"Start PCA\"\n[1] \"Fun linear DONE\"\n[1] \"starting hclust\"\n\n\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.4 GiB\n\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.4 GiB\n\nobj = ttm$object\nttm$pca.cell.2\n\n\n\n\n\nttm$genes.plot\n\nWarning: ggrepel: 13 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\nttm$pca_cells$code <- str_split(rownames(ttm$pca_cells),pattern = \"_\",simplify = T)[,1]\n\nggplot(ttm$pca_cells, aes(x=PC1, y=PC2,colour =code)) +\n                  geom_point(alpha = 0.5, size=2)\n\n\n\n\n\nggplot(ttm$pca_cells, aes(x=PC1, y=PC3,colour =code)) +\n                  geom_point(alpha = 0.5, size=2)\n\n\n\n\nTo color the PCA based on cells’ RNA extraction efficiency\n\nttm$UDE.plot\n\n\n\n\nUDE (color) should not correlate with principal components! This is very important. The next part is used to remove the cells with efficiency too low.\n\nnu_df = data.frame(\"nu\"= sort(get.nu(obj)), \"n\"=c(1:length(get.nu(obj))))\n\nggplot(nu_df, aes(x = n, y=nu)) + \n    geom_point(colour = \"#8491B4B2\", size=1)\n\n\n\n    #my_theme #+ ylim(0,1) + xlim(0,70)\n\nWe can zoom on the smallest values and, if we detect a clear elbow, we can decide to remove the cells.\n\nyset = 0.026#threshold to remove low UDE cells\nplot.ude <- ggplot(nu_df, aes(x = n, y=nu)) + \n    geom_point(colour = \"#8491B4B2\", size=1) + \n     ylim(0,0.1) + xlim(0,5000) +\n    geom_hline(yintercept=yset, linetype=\"dashed\", color = \"darkred\") +\n    annotate(geom=\"text\", x=200, y=0.05, \n             label=paste(\"to remove cells with nu < \",yset,sep = \" \"), \n             color=\"darkred\", size=4.5)\n\nplot.ude\n\nWarning: Removed 16823 rows containing missing values (geom_point).\n\n\n\n\n\nFor this round of analysis, we want to keep the low UMI cells to keep a cell population with very low amounts of RNA as neutrophil cells. So we drop only cell with a nu lower then 0.024 here.\n\nobj = add.row.to.meta(obj,c(\"Threshold low UDE cells:\",yset)) \n\nto_rem = rownames(nu_df[which(nu_df$nu < yset),])\n\nobj = drop.genes.cells(object = obj, genes = c(),cells =  to_rem)\n\n\nprint(paste(\"Condition \", patient ,sep = \"\"))\n\n[1] \"Condition patient5_ileum\"\n\n#--------------------------------------\nn_cells = length(get.cell.size(object = obj))\nprint(paste(\"n cells\", n_cells, sep = \" \"))\n\n[1] \"n cells 21019\"\n\nn_it = 1\n\n\nttm = clean(obj)\n\n[1] \"Starting\"\n[1] \"Cells/genes selection done\"\n[1] \"Start estimation mu with linear method\"\n[1]  8528 21019\n[1] \"Start PCA\"\n[1] \"Fun linear DONE\"\n[1] \"starting hclust\"\n\n\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.3 GiB\n\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.3 GiB\n\nobj = ttm$object\nttm$pca.cell.2\n\n\n\n\n\nttm$genes.plot\n\nWarning: ggrepel: 13 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\nttm$UDE.plot\n\n\n\n\n\nECD.plot(obj,y_cut = 30)\n\n\n\n\n\nscatter.plot(obj = obj,split.pattern = \"[_]\",n.col = 1)\n\n\n\n\n\nsaveRDS(obj,paste0(out_dir,patient,\"_obj_cotan.RDS\"))\n\n\nSession info\n\nsessionInfo()\n\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.0.0        testthat_3.1.4     sp_1.5-0           SeuratObject_4.1.2\n[5] Seurat_4.2.0       ggrepel_0.9.1      ggplot2_3.3.6      Matrix_1.5-1      \n[9] data.table_1.14.2 \n\nloaded via a namespace (and not attached):\n  [1] readxl_1.4.0          circlize_0.4.15       plyr_1.8.7           \n  [4] igraph_1.3.4          lazyeval_0.2.2        splines_4.2.1        \n  [7] listenv_0.8.0         scattermore_0.8       usethis_2.1.6        \n [10] digest_0.6.29         foreach_1.5.2         htmltools_0.5.2      \n [13] viridis_0.6.2         fansi_1.0.3           magrittr_2.0.3       \n [16] memoise_2.0.1         tensor_1.5            cluster_2.1.4        \n [19] doParallel_1.0.17     ROCR_1.0-11           remotes_2.4.2        \n [22] ComplexHeatmap_2.13.0 globals_0.16.0        matrixStats_0.62.0   \n [25] spatstat.sparse_3.0-0 prettyunits_1.1.1     colorspace_2.0-3     \n [28] xfun_0.31             dplyr_1.0.9           callr_3.7.0          \n [31] crayon_1.5.1          jsonlite_1.8.0        progressr_0.11.0     \n [34] spatstat.data_3.0-0   survival_3.4-0        zoo_1.8-10           \n [37] iterators_1.0.14      glue_1.6.2            polyclip_1.10-0      \n [40] gtable_0.3.0          leiden_0.4.2          GetoptLong_1.0.5     \n [43] pkgbuild_1.3.1        RcppZiggurat_0.1.6    shape_1.4.6          \n [46] future.apply_1.9.0    BiocGenerics_0.43.0   abind_1.4-5          \n [49] scales_1.2.0          DBI_1.1.3             ggthemes_4.2.4       \n [52] spatstat.random_2.2-0 miniUI_0.1.1.1        Rcpp_1.0.9           \n [55] viridisLite_0.4.0     xtable_1.8-4          clue_0.3-61          \n [58] reticulate_1.25       spatstat.core_2.4-4   stats4_4.2.1         \n [61] htmlwidgets_1.5.4     httr_1.4.4            RColorBrewer_1.1-3   \n [64] ellipsis_0.3.2        factoextra_1.0.7      ica_1.0-2            \n [67] farver_2.1.0          pkgconfig_2.0.3       uwot_0.1.14          \n [70] deldir_1.0-6          utf8_1.2.2            labeling_0.4.2       \n [73] tidyselect_1.2.0      rlang_1.0.6           reshape2_1.4.4       \n [76] later_1.3.0           cellranger_1.1.0      munsell_0.5.0        \n [79] tools_4.2.1           cachem_1.0.6          cli_3.4.1            \n [82] generics_0.1.2        devtools_2.4.3        ggridges_0.5.3       \n [85] evaluate_0.17         stringr_1.4.0         fastmap_1.1.0        \n [88] yaml_2.3.5            goftest_1.2-3         processx_3.7.0       \n [91] knitr_1.40            fs_1.5.2              fitdistrplus_1.1-8   \n [94] purrr_0.3.4           RANN_2.6.1            dendextend_1.16.0    \n [97] pbapply_1.5-0         future_1.28.0         nlme_3.1-160         \n[100] mime_0.12             brio_1.1.3            compiler_4.2.1       \n[103] rstudioapi_0.13       plotly_4.10.0         png_0.1-7            \n[106] spatstat.utils_3.0-1  tibble_3.1.7          stringi_1.7.6        \n[109] ps_1.7.0              desc_1.4.1            rgeos_0.5-9          \n[112] lattice_0.20-45       vctrs_0.5.0           pillar_1.8.1         \n[115] lifecycle_1.0.3       spatstat.geom_3.0-3   lmtest_0.9-40        \n[118] GlobalOptions_0.1.2   RcppAnnoy_0.0.19      cowplot_1.1.1        \n[121] irlba_2.3.5.1         httpuv_1.6.5          patchwork_1.1.1      \n[124] R6_2.5.1              promises_1.2.0.1      KernSmooth_2.23-20   \n[127] gridExtra_2.3         IRanges_2.31.2        parallelly_1.32.1    \n[130] sessioninfo_1.2.2     codetools_0.2-18      MASS_7.3-58          \n[133] assertthat_0.2.1      pkgload_1.3.0         rjson_0.2.21         \n[136] rprojroot_2.0.3       withr_2.5.0           sctransform_0.3.5    \n[139] S4Vectors_0.35.0      mgcv_1.8-41           parallel_4.2.1       \n[142] grid_4.2.1            rpart_4.1.19          tidyr_1.2.0          \n[145] Rfast_2.0.6           rmarkdown_2.17        Rtsne_0.16           \n[148] shiny_1.7.1"
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient7_NB.html",
    "href": "Crohn_disease/results/01_cleaning_patient7_NB.html",
    "title": "Cleaning notebook patient 7",
    "section": "",
    "text": "Last compiled"
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient7_NB.html#general-cleaning",
    "href": "Crohn_disease/results/01_cleaning_patient7_NB.html#general-cleaning",
    "title": "Cleaning notebook patient 7",
    "section": "General cleaning",
    "text": "General cleaning\nWe want to remove cell doublets or multiplets and low-quality or dying cells (with too high mtRNA percentage).\n\nBy library sizes\nFirst we check the library size (UMI number) with an empirical cumulative distribution function.\n\nECD.plot(obj,y_cut = 20)\n\n\n\n\nSo to start we drop all cell with library size lower then 6.\nThe next plot shows the library size of each cell in a violin and box plot.\n\nsizes <- Matrix::colSums(obj@raw)\n\nobj <- drop.genes.cells(object = obj,cells = names(sizes[ sizes < 20]))\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (geom_point).\n\n\n\n\n\nWe can subset and drop the unwanted cell by library size.\n\nsizes <- Matrix::colSums(obj@raw)\n\nobj <- drop.genes.cells(object = obj,cells = names(sizes[ sizes > 7500]))\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\n\n\n\n\ndim(obj@raw)\n\n[1] 20208 13842\n\n\n\n\nBy mitochondrial gene percentage\nWe will next have a look the percentage of reads coming from mitochondrial genes. This can help to drop dying cells: these cells will have a percentage of mitochondrial reads particularly high.\n\ndf <- mitochondrial.percentage.plot(obj,split.pattern = \"_\",n.col = 1,gene.prefix = \"^MT-\")\n\ndf$plot\n\n\n\n\n\nobj <- drop.genes.cells(object = obj,cells = rownames(df$sizes[df$sizes$mit.percentage > 15,]))\ndf <- mitochondrial.percentage.plot(obj,split.pattern = \"_\",n.col = 1,gene.prefix = \"^MT-\")\n\ndf$plot\n\n\n\n\nWe check again the library size plot\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (geom_point).\n\n\n\n\n\n\n\nGene and library size scatter plot\n\nscatter.plot(obj = obj,split.pattern = \"[_]\",n.col = 1)\n\n\n\n\nMin gene number\n\nsort(colSums(obj@raw > 0),decreasing = F)[1:10]\n\n128_CATGGCGTCAGCGATT-1 128_CGAGCCAGTACTTGAC-1 128_GATCGATCATCACAAC-1 \n                     4                      5                      5 \n128_GCGCCAATCACATGCA-1 128_GCTGCGATCAACGGGA-1 128_GGCGTGTTCTACCTGC-1 \n                     5                      5                      5 \n128_TACGGGCCAGCAGTTT-1 128_TCTTCGGTCAACGGCC-1 128_CGATTGAGTAGCTAAA-1 \n                     5                      5                      6 \n128_CTTACCGGTTCACCTC-1 \n                     6 \n\n\nWe decided to drop all cells having less then 10 genes detected\n\nto.drop <- names(sort(colSums(obj@raw > 0),decreasing = F)[sort(colSums(obj@raw > 0),decreasing = F) < 15])\n\nobj <- drop.genes.cells(object = obj,cells = to.drop)\nscatter.plot(obj = obj,split.pattern = \"[_]\",n.col = 1)\n\n\n\n\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (geom_point).\n\n\n\n\n\n\nobj <- initRaw(obj,GEO=\"GSM3972009\",sc.method=\"10X\",\n             cond = \"patient.7 ileum\")\n\n[1] \"Initializing S4 object\"\n\n\n\nprint(paste(\"Condition \", patient ,sep = \"\"))\n\n[1] \"Condition patient7_ileum\"\n\n#--------------------------------------\nn_cells = length(get.cell.size(object = obj))\nprint(paste(\"n cells\", n_cells, sep = \" \"))\n\n[1] \"n cells 9411\"\n\nn_it = 1"
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient7_NB.html#cotan-specific-data-cleaning",
    "href": "Crohn_disease/results/01_cleaning_patient7_NB.html#cotan-specific-data-cleaning",
    "title": "Cleaning notebook patient 7",
    "section": "COTAN specific data cleaning",
    "text": "COTAN specific data cleaning\nFirst, we create a directory to store all information regarding the data cleaning.\n\nif(!file.exists(out_dir)){\n  dir.create(file.path(out_dir))\n}\n\nif(!file.exists(paste(out_dir,\"cleaning\", sep = \"\"))){   \n  dir.create(file.path(out_dir, \"cleaning\"))\n}\n\n\ngc()\n\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  5421930 289.6    9266921  495.0   8717455  465.6\nVcells 39097284 298.3  137297559 1047.5 142586433 1087.9\n\nttm = clean(obj)\n\n[1] \"Starting\"\n[1] \"Cells/genes selection done\"\n[1] \"Start estimation mu with linear method\"\n[1] 10679  9411\n[1] \"Start PCA\"\n[1] \"Fun linear DONE\"\n[1] \"starting hclust\"\n\nobj = ttm$object\n\nttm$pca.cell.2\n\n\n\n\n\nttm$pca_cells$code <- str_split(rownames(ttm$pca_cells),pattern = \"_\",simplify = T)[,1]\n\nggplot(ttm$pca_cells, aes(x=PC1, y=PC2,colour =code)) +\n                  geom_point(alpha = 0.5, size=2)\n\n\n\n\n\nggplot(ttm$pca_cells, aes(x=PC1, y=PC3,colour =code)) +\n                  geom_point(alpha = 0.5, size=2)\n\n\n\n\n\nttm$genes.plot\n\nWarning: ggrepel: 12 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\nTo color the PCA based on cells’ RNA extraction efficiency\n\nttm$UDE.plot\n\n\n\n\nUDE (color) should not correlate with principal components! This is very important. The next part is used to remove the cells with efficiency too low.\n\nnu_df = data.frame(\"nu\"= sort(get.nu(obj)), \"n\"=c(1:length(get.nu(obj))))\n\nggplot(nu_df, aes(x = n, y=nu)) + \n    geom_point(colour = \"#8491B4B2\", size=1)\n\n\n\n    #my_theme #+ ylim(0,1) + xlim(0,70)\n\nWe can zoom on the smallest values and, if we detect a clear elbow, we can decide to remove the cells.\n\nyset = 0.025#threshold to remove low UDE cells\nplot.ude <- ggplot(nu_df, aes(x = n, y=nu)) + \n    geom_point(colour = \"#8491B4B2\", size=1) + \n     ylim(0,0.2) + xlim(0,5000) +\n    geom_hline(yintercept=yset, linetype=\"dashed\", color = \"darkred\") +\n    annotate(geom=\"text\", x=200, y=0.05, \n             label=paste(\"to remove cells with nu < \",yset,sep = \" \"), \n             color=\"darkred\", size=4.5)\n\nplot.ude\n\nWarning: Removed 5243 rows containing missing values (geom_point).\n\n\n\n\n\nFor this round of analysis, we want to keep the low UMI cells to keep a cell population with very low amounts of RNA as neutrophil cells. So we drop only cell with a nu lower then 0.024 here.\n\nobj = add.row.to.meta(obj,c(\"Threshold low UDE cells:\",yset)) \n\nto_rem = rownames(nu_df[which(nu_df$nu < yset),])\n\nobj = drop.genes.cells(object = obj, genes = c(),cells =  to_rem)\n\n\nprint(paste(\"Condition \", patient ,sep = \"\"))\n\n[1] \"Condition patient7_ileum\"\n\n#--------------------------------------\nn_cells = length(get.cell.size(object = obj))\nprint(paste(\"n cells\", n_cells, sep = \" \"))\n\n[1] \"n cells 7564\"\n\nn_it = 1\n\n\nttm = clean(obj)\n\n[1] \"Starting\"\n[1] \"Cells/genes selection done\"\n[1] \"Start estimation mu with linear method\"\n[1] 10679  7564\n[1] \"Start PCA\"\n[1] \"Fun linear DONE\"\n[1] \"starting hclust\"\n\nobj = ttm$object\nttm$pca.cell.2\n\n\n\n\n\nttm$genes.plot\n\nWarning: ggrepel: 13 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\nttm$UDE.plot\n\n\n\n\n\nECD.plot(obj,y_cut = 25)\n\n\n\n\n\nscatter.plot(obj = obj,split.pattern = \"[_]\",n.col = 1)\n\n\n\n\n\n#saveRDS(obj,paste0(out_dir,patient,\"_obj_cotan.RDS\"))\n\n\nSession info\n\nsessionInfo()\n\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_0.99.12     testthat_3.1.4    stringr_1.4.0     ggrepel_0.9.1    \n[5] ggplot2_3.3.6     Matrix_1.5-1      data.table_1.14.2\n\nloaded via a namespace (and not attached):\n  [1] readxl_1.4.0          circlize_0.4.15       plyr_1.8.7           \n  [4] igraph_1.3.4          lazyeval_0.2.2        sp_1.5-0             \n  [7] splines_4.2.1         listenv_0.8.0         scattermore_0.8      \n [10] usethis_2.1.6         digest_0.6.29         foreach_1.5.2        \n [13] htmltools_0.5.2       viridis_0.6.2         fansi_1.0.3          \n [16] magrittr_2.0.3        memoise_2.0.1         tensor_1.5           \n [19] cluster_2.1.4         doParallel_1.0.17     ROCR_1.0-11          \n [22] remotes_2.4.2         ComplexHeatmap_2.13.0 globals_0.16.0       \n [25] matrixStats_0.62.0    spatstat.sparse_2.1-1 prettyunits_1.1.1    \n [28] colorspace_2.0-3      xfun_0.31             dplyr_1.0.9          \n [31] callr_3.7.0           crayon_1.5.1          jsonlite_1.8.0       \n [34] progressr_0.11.0      spatstat.data_2.2-0   survival_3.4-0       \n [37] zoo_1.8-10            iterators_1.0.14      glue_1.6.2           \n [40] polyclip_1.10-0       gtable_0.3.0          leiden_0.4.2         \n [43] GetoptLong_1.0.5      pkgbuild_1.3.1        RcppZiggurat_0.1.6   \n [46] future.apply_1.9.0    shape_1.4.6           BiocGenerics_0.43.0  \n [49] abind_1.4-5           scales_1.2.0          DBI_1.1.3            \n [52] ggthemes_4.2.4        spatstat.random_2.2-0 miniUI_0.1.1.1       \n [55] Rcpp_1.0.9            viridisLite_0.4.0     xtable_1.8-4         \n [58] clue_0.3-61           reticulate_1.25       spatstat.core_2.4-4  \n [61] stats4_4.2.1          htmlwidgets_1.5.4     httr_1.4.4           \n [64] RColorBrewer_1.1-3    ellipsis_0.3.2        Seurat_4.2.0         \n [67] factoextra_1.0.7      ica_1.0-2             farver_2.1.0         \n [70] pkgconfig_2.0.3       uwot_0.1.14           deldir_1.0-6         \n [73] utf8_1.2.2            labeling_0.4.2        tidyselect_1.2.0     \n [76] rlang_1.0.6           reshape2_1.4.4        later_1.3.0          \n [79] cellranger_1.1.0      munsell_0.5.0         tools_4.2.1          \n [82] cachem_1.0.6          cli_3.4.1             generics_0.1.2       \n [85] devtools_2.4.3        ggridges_0.5.3        evaluate_0.17        \n [88] fastmap_1.1.0         goftest_1.2-3         yaml_2.3.5           \n [91] processx_3.7.0        knitr_1.40            fs_1.5.2             \n [94] fitdistrplus_1.1-8    purrr_0.3.4           RANN_2.6.1           \n [97] dendextend_1.16.0     nlme_3.1-160          pbapply_1.5-0        \n[100] future_1.28.0         mime_0.12             brio_1.1.3           \n[103] compiler_4.2.1        rstudioapi_0.13       plotly_4.10.0        \n[106] png_0.1-7             spatstat.utils_2.3-1  tibble_3.1.7         \n[109] stringi_1.7.6         ps_1.7.0              desc_1.4.1           \n[112] rgeos_0.5-9           lattice_0.20-45       vctrs_0.4.1          \n[115] pillar_1.8.1          lifecycle_1.0.3       spatstat.geom_2.4-0  \n[118] lmtest_0.9-40         GlobalOptions_0.1.2   RcppAnnoy_0.0.19     \n[121] cowplot_1.1.1         irlba_2.3.5.1         httpuv_1.6.5         \n[124] patchwork_1.1.1       R6_2.5.1              promises_1.2.0.1     \n[127] KernSmooth_2.23-20    gridExtra_2.3         IRanges_2.31.2       \n[130] parallelly_1.32.1     sessioninfo_1.2.2     codetools_0.2-18     \n[133] MASS_7.3-58           assertthat_0.2.1      pkgload_1.3.0        \n[136] rprojroot_2.0.3       rjson_0.2.21          withr_2.5.0          \n[139] SeuratObject_4.1.2    sctransform_0.3.5     S4Vectors_0.35.0     \n[142] mgcv_1.8-40           parallel_4.2.1        rpart_4.1.16         \n[145] grid_4.2.1            tidyr_1.2.0           rmarkdown_2.17       \n[148] Rfast_2.0.6           Rtsne_0.16            shiny_1.7.1"
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient8_NB.html",
    "href": "Crohn_disease/results/01_cleaning_patient8_NB.html",
    "title": "Cleaning notebook patient 8",
    "section": "",
    "text": "Last compiled"
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient8_NB.html#general-cleaning",
    "href": "Crohn_disease/results/01_cleaning_patient8_NB.html#general-cleaning",
    "title": "Cleaning notebook patient 8",
    "section": "General cleaning",
    "text": "General cleaning\nWe want to remove cell doublets or multiplets and low-quality or dying cells (with too high mtRNA percentage).\n\nBy library sizes\nFirst we check the library size (UMI number) with an empirical cumulative distribution function.\n\nECD.plot(obj,y_cut = 30)\n\n\n\n\nSo to start we drop all cell with library size lower then 30.\nThe next plot shows the library size of each cell in a violin and box plot.\n\nsizes <- Matrix::colSums(obj@raw)\n\nobj <- drop.genes.cells(object = obj,cells = names(sizes[ sizes < 30]))\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (geom_point).\n\n\n\n\n\nWe can subset and drop the unwanted cell by library size.\n\nsizes <- Matrix::colSums(obj@raw)\n\nobj <- drop.genes.cells(object = obj,cells = names(sizes[ sizes > 5000]))\nobj <- drop.genes.cells(object = obj,cells = names(sizes[ sizes < 30]))\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (geom_point).\n\n\n\n\n\n\ndim(obj@raw)\n\n[1] 20769 14688\n\n\n\n\nBy mitochondrial gene percentage\nWe will next have a look the percentage of reads coming from mitochondrial genes. This can help to drop dying cells: these cells will have a percentage of mitochondrial reads particularly high.\n\ndf <- mitochondrial.percentage.plot(obj,split.pattern = \"_\",n.col = 1,gene.prefix = \"^MT-\")\n\ndf$plot\n\n\n\n\n\nobj <- drop.genes.cells(object = obj,cells = rownames(df$sizes[df$sizes$mit.percentage > 10,]))\ndf <- mitochondrial.percentage.plot(obj,split.pattern = \"_\",n.col = 1,gene.prefix = \"^MT-\")\n\ndf$plot\n\n\n\n\nWe check again the library size plot\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (geom_point).\n\n\n\n\n\n\n\nGene and library size scatter plot\n\nscatter.plot(obj = obj,split.pattern = \"[_]\",n.col = 1)\n\n\n\n\nMin gene number\n\nsort(colSums(obj@raw > 0),decreasing = F)[1:10]\n\n138_AATCGGTTCAACGCTA-1 138_CCGTTCAAGGTGTTAA-1 138_CTAGTGAGTACTCTCC-1 \n                     9                      9                      9 \n138_CTCGAGGAGCTATGCT-1 138_TGGTTAGGTGATGTCT-1 138_AAGGCAGAGTCATGCT-1 \n                     9                      9                     10 \n138_GTCACAATCGTCCAGG-1 138_GTCTTCGCATCGGTTA-1 138_GTTAAGCCAAGTACCT-1 \n                    10                     10                     10 \n138_TTGACTTCACTAGTAC-1 \n                    10 \n\n\n\nhist(sort(colSums(obj@raw > 0),decreasing = F),breaks = 100)\n\n\n\n\nWe decided to drop all cells having less then 15 genes detected\n\nto.drop <- names(sort(colSums(obj@raw > 0),decreasing = F)[sort(colSums(obj@raw > 0),decreasing = F) < 15])\n\nobj <- drop.genes.cells(object = obj,cells = to.drop)\nscatter.plot(obj = obj,split.pattern = \"[_]\",n.col = 1)\n\n\n\n\n\nlibrary.size.plot(obj,split.pattern = \"_\",n.col = 1)\n\nScale for 'y' is already present. Adding another scale for 'y', which will\nreplace the existing scale.\n\n\n\n\n\n\nobj <- initRaw(obj,GEO=\"GSM3972009\",sc.method=\"10X\",\n             cond = \"patient.8 ileum\")\n\n[1] \"Initializing S4 object\"\n\n\n\nprint(paste(\"Condition \", patient ,sep = \"\"))\n\n[1] \"Condition patient8_ileum\"\n\n#--------------------------------------\nn_cells = length(get.cell.size(object = obj))\nprint(paste(\"n cells\", n_cells, sep = \" \"))\n\n[1] \"n cells 9223\"\n\nn_it = 1"
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient8_NB.html#cotan-specific-data-cleaning",
    "href": "Crohn_disease/results/01_cleaning_patient8_NB.html#cotan-specific-data-cleaning",
    "title": "Cleaning notebook patient 8",
    "section": "COTAN specific data cleaning",
    "text": "COTAN specific data cleaning\nFirst, we create a directory to store all information regarding the data cleaning.\n\nif(!file.exists(out_dir)){\n  dir.create(file.path(out_dir))\n}\n\nif(!file.exists(paste(out_dir,\"cleaning\", sep = \"\"))){   \n  dir.create(file.path(out_dir, \"cleaning\"))\n}\n\n\ngc()\n\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  5446101 290.9    9283054  495.8   8286684  442.6\nVcells 42540831 324.6  142180876 1084.8 147672669 1126.7\n\nttm = clean(obj)\n\n[1] \"Starting\"\n[1] \"Cells/genes selection done\"\n[1] \"Start estimation mu with linear method\"\n[1] 10188  9223\n[1] \"Start PCA\"\n[1] \"Fun linear DONE\"\n[1] \"starting hclust\"\n\nobj = ttm$object\n\nttm$pca.cell.2\n\n\n\n\n\nttm$pca_cells$code <- str_split(rownames(ttm$pca_cells),pattern = \"_\",simplify = T)[,1]\n\nggplot(ttm$pca_cells, aes(x=PC1, y=PC2,colour =code)) +\n                  geom_point(alpha = 0.5, size=2)\n\n\n\n\n\nggplot(ttm$pca_cells, aes(x=PC1, y=PC3,colour =code)) +\n                  geom_point(alpha = 0.5, size=2)\n\n\n\n\n\nttm$genes.plot\n\nWarning: ggrepel: 14 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\nTo color the PCA based on cells’ RNA extraction efficiency\n\nttm$UDE.plot\n\n\n\n\nUDE (color) should not correlate with principal components! This is very important. The next part is used to remove the cells with efficiency too low.\n\nnu_df = data.frame(\"nu\"= sort(get.nu(obj)), \"n\"=c(1:length(get.nu(obj))))\n\nggplot(nu_df, aes(x = n, y=nu)) + \n    geom_point(colour = \"#8491B4B2\", size=1)\n\n\n\n    #my_theme #+ ylim(0,1) + xlim(0,70)\n\nWe can zoom on the smallest values and, if we detect a clear elbow, we can decide to remove the cells.\n\nyset = 0.025#threshold to remove low UDE cells\nplot.ude <- ggplot(nu_df, aes(x = n, y=nu)) + \n    geom_point(colour = \"#8491B4B2\", size=1) + \n     ylim(0,0.5) + xlim(0,5000) +\n    geom_hline(yintercept=yset, linetype=\"dashed\", color = \"darkred\") +\n    annotate(geom=\"text\", x=200, y=0.05, \n             label=paste(\"to remove cells with nu < \",yset,sep = \" \"), \n             color=\"darkred\", size=4.5)\n\nplot.ude\n\nWarning: Removed 6511 rows containing missing values (geom_point).\n\n\n\n\n\nFor this round of analysis, we want to keep the low UMI cells to keep a cell population with very low amounts of RNA as neutrophil cells.\n\nECD.plot(obj,y_cut = 25)\n\n\n\n\n\nscatter.plot(obj = obj,split.pattern = \"[_]\",n.col = 1)\n\n\n\n\n\nsaveRDS(obj,paste0(out_dir,patient,\"_obj_cotan.RDS\"))\n\n\nSession info\n\nsessionInfo()\n\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.0.0       testthat_3.1.4    stringr_1.4.0     ggrepel_0.9.1    \n[5] ggplot2_3.3.6     Matrix_1.5-1      data.table_1.14.2\n\nloaded via a namespace (and not attached):\n  [1] readxl_1.4.0          circlize_0.4.15       plyr_1.8.7           \n  [4] igraph_1.3.4          lazyeval_0.2.2        sp_1.5-0             \n  [7] splines_4.2.1         listenv_0.8.0         scattermore_0.8      \n [10] usethis_2.1.6         digest_0.6.29         foreach_1.5.2        \n [13] htmltools_0.5.2       viridis_0.6.2         fansi_1.0.3          \n [16] magrittr_2.0.3        memoise_2.0.1         tensor_1.5           \n [19] cluster_2.1.4         doParallel_1.0.17     ROCR_1.0-11          \n [22] remotes_2.4.2         ComplexHeatmap_2.13.0 globals_0.16.0       \n [25] matrixStats_0.62.0    spatstat.sparse_3.0-0 prettyunits_1.1.1    \n [28] colorspace_2.0-3      xfun_0.31             dplyr_1.0.9          \n [31] callr_3.7.0           crayon_1.5.1          jsonlite_1.8.0       \n [34] progressr_0.11.0      spatstat.data_3.0-0   survival_3.4-0       \n [37] zoo_1.8-10            iterators_1.0.14      glue_1.6.2           \n [40] polyclip_1.10-0       gtable_0.3.0          leiden_0.4.2         \n [43] GetoptLong_1.0.5      pkgbuild_1.3.1        RcppZiggurat_0.1.6   \n [46] future.apply_1.9.0    shape_1.4.6           BiocGenerics_0.43.0  \n [49] abind_1.4-5           scales_1.2.0          DBI_1.1.3            \n [52] ggthemes_4.2.4        spatstat.random_2.2-0 miniUI_0.1.1.1       \n [55] Rcpp_1.0.9            viridisLite_0.4.0     xtable_1.8-4         \n [58] clue_0.3-61           reticulate_1.25       spatstat.core_2.4-4  \n [61] stats4_4.2.1          htmlwidgets_1.5.4     httr_1.4.4           \n [64] RColorBrewer_1.1-3    ellipsis_0.3.2        Seurat_4.2.0         \n [67] factoextra_1.0.7      ica_1.0-2             farver_2.1.0         \n [70] pkgconfig_2.0.3       uwot_0.1.14           deldir_1.0-6         \n [73] utf8_1.2.2            labeling_0.4.2        tidyselect_1.2.0     \n [76] rlang_1.0.6           reshape2_1.4.4        later_1.3.0          \n [79] cellranger_1.1.0      munsell_0.5.0         tools_4.2.1          \n [82] cachem_1.0.6          cli_3.4.1             generics_0.1.2       \n [85] devtools_2.4.3        ggridges_0.5.3        evaluate_0.17        \n [88] fastmap_1.1.0         goftest_1.2-3         yaml_2.3.5           \n [91] processx_3.7.0        knitr_1.40            fs_1.5.2             \n [94] fitdistrplus_1.1-8    purrr_0.3.4           RANN_2.6.1           \n [97] dendextend_1.16.0     nlme_3.1-160          pbapply_1.5-0        \n[100] future_1.28.0         mime_0.12             brio_1.1.3           \n[103] compiler_4.2.1        rstudioapi_0.13       plotly_4.10.0        \n[106] png_0.1-7             spatstat.utils_3.0-1  tibble_3.1.7         \n[109] stringi_1.7.6         ps_1.7.0              desc_1.4.1           \n[112] rgeos_0.5-9           lattice_0.20-45       vctrs_0.5.0          \n[115] pillar_1.8.1          lifecycle_1.0.3       spatstat.geom_3.0-3  \n[118] lmtest_0.9-40         GlobalOptions_0.1.2   RcppAnnoy_0.0.19     \n[121] cowplot_1.1.1         irlba_2.3.5.1         httpuv_1.6.5         \n[124] patchwork_1.1.1       R6_2.5.1              promises_1.2.0.1     \n[127] KernSmooth_2.23-20    gridExtra_2.3         IRanges_2.31.2       \n[130] parallelly_1.32.1     sessioninfo_1.2.2     codetools_0.2-18     \n[133] MASS_7.3-58           assertthat_0.2.1      pkgload_1.3.0        \n[136] rprojroot_2.0.3       rjson_0.2.21          withr_2.5.0          \n[139] SeuratObject_4.1.2    sctransform_0.3.5     S4Vectors_0.35.0     \n[142] mgcv_1.8-41           parallel_4.2.1        rpart_4.1.19         \n[145] grid_4.2.1            tidyr_1.2.0           rmarkdown_2.17       \n[148] Rfast_2.0.6           Rtsne_0.16            shiny_1.7.1"
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient11_NB.html",
    "href": "Crohn_disease/results/01_cleaning_patient11_NB.html",
    "title": "Cleaning notebook patient 11",
    "section": "",
    "text": "Last compiled"
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient11_NB.html#general-cleaning",
    "href": "Crohn_disease/results/01_cleaning_patient11_NB.html#general-cleaning",
    "title": "Cleaning notebook patient 11",
    "section": "General cleaning",
    "text": "General cleaning\nWe want to remove cell doublets or multiplets and low-quality or dying cells (with too high mtRNA percentage).\n\nBy library sizes\nFirst, we check the library size (UMI number) with an empirical cumulative distribution function.\n\nECD.plot(obj,y_cut = 20)\n\n\n\n\nSo to start we drop all cells with library sizes lower then 20.\nThe next plot shows the library size of each cell in a violin and box plot.\n\nobj <- dropGenesCells(obj,cells = names(getCellsSize(obj)[getCellsSize(obj) < 20]))\n\nlibrarySizePlot(obj,splitPattern = \"_\",numCols = 1)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nWe can subset and drop the unwanted cell by library size.\n\nobj <- dropGenesCells(obj,cells = names(getCellsSize(obj)[getCellsSize(obj) > 15000]))\n\nlibrarySizePlot(obj,splitPattern = \"_\",numCols = 1)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\n\n\nDetected genes\nThe next plot shows the number of genes detected in each cell in a violin and box plot.\n\ngenesSizePlot(obj,splitPattern = \"_\",numCols = 1)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\n\nto.drop <- names(sort(colSums(getRawData(obj) > 0),decreasing = F)[sort(colSums(getRawData(obj) > 0),decreasing = F) < 30])\nobj <- dropGenesCells(obj,cells = to.drop)\ngenesSizePlot(obj,splitPattern = \"_\",numCols = 1)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\nAnd we drop again possible doublets\n\nto.drop <- names(sort(colSums(getRawData(obj) > 0),decreasing = F)[sort(colSums(getRawData(obj) > 0),decreasing = F) > 2500])\nobj <- dropGenesCells(obj,cells = to.drop)\ngenesSizePlot(obj,splitPattern = \"_\",numCols = 1)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nCheck again the library size\n\nlibrarySizePlot(obj,splitPattern = \"_\",numCols = 1)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\n\nobj <- dropGenesCells(obj,cells = names(getCellsSize(obj)[getCellsSize(obj) > 10000]))\n\nlibrarySizePlot(obj,splitPattern = \"_\",numCols = 1)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\ndim(getRawData(obj))\n\n[1] 18244 17116\n\n\n\n\nBy mitochondrial gene percentage\nWe will next have a look at the percentage of reads coming from mitochondrial genes. This can help to drop dying cells: these cells will have a percentage of mitochondrial reads particularly high.\n\ndf <- mitochondrialPercentagePlot(obj,splitPattern = \"_\",numCols = 1,genePrefix = \"^MT-\")\n\ndf$plot\n\n\n\n\n\nobj <- dropGenesCells(obj,cells = rownames(df$sizes[df$sizes$mit.percentage > 15,]))\ndf <- mitochondrialPercentagePlot(obj,splitPattern = \"_\",numCols = 1,genePrefix = \"^MT-\")\n\ndf$plot\n\n\n\n\nWe check again the library size plot\n\nlibrarySizePlot(obj,splitPattern = \"_\",numCols = 1)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\ngenesSizePlot(obj,splitPattern = \"_\",numCols = 1)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nGene and library size scatter plot\n\nscatterPlot(obj, splitPattern = \"[_]\", numCols = 1)\n\n\n\n\nMin gene number\n\nsort(colSums(getRawData(obj) > 0),decreasing = F)[1:10]\n\n180_ACAGCCGAGCACACAG-1 180_ACAGCTAAGAACTGTA-1 180_AGACGTTTCCTATTCA-1 \n                    30                     30                     30 \n180_AGAGCTTTCTGCCCTA-1 180_AGCGTCGCATGGGAAC-1 180_ATAGACCAGGATGGTC-1 \n                    30                     30                     30 \n180_CACCACTCATTGGTAC-1 180_CCGTACTAGCTAAGAT-1 180_CTCACACCAATGGATA-1 \n                    30                     30                     30 \n180_GATCGCGTCCAAGTAC-1 \n                    30 \n\n\n\nhist(sort(colSums(getRawData(obj) > 0),decreasing = F),breaks = 100)\n\n\n\n\nWe decided to drop all cells having less then 15 genes detected\n\nto.drop <- names(sort(colSums(getRawData(obj) > 0),decreasing = F)[sort(colSums(getRawData(obj) > 0),decreasing = F) < 15])\n\nobj <- dropGenesCells(obj,cells = to.drop)\n\nSetting new log level to 1\n\nscatterPlot(obj,splitPattern = \"[_]\",numCols = 1)\n\n\n\n\n\nlibrarySizePlot(obj,splitPattern = \"_\",numCols = 1)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\ngenesSizePlot(obj,splitPattern = \"_\",numCols = 1)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\n\nobj <- initializeMetaDataset(obj,GEO=\"GSM3972009\", \n                             sequencingMethod = \"10X\",\n                             sampleCondition = \"patient.11 ileum\")\n\n\nn_it = 1\nprint(paste(\"Condition \", patient ,sep = \"\"))\n\n[1] \"Condition patient11_ileum\"\n\n#--------------------------------------\nprint(paste(\"n cells\", getNumCells(obj), sep = \" \"))\n\n[1] \"n cells 15249\""
  },
  {
    "objectID": "Crohn_disease/results/01_cleaning_patient11_NB.html#cotan-specific-data-cleaning",
    "href": "Crohn_disease/results/01_cleaning_patient11_NB.html#cotan-specific-data-cleaning",
    "title": "Cleaning notebook patient 11",
    "section": "COTAN specific data cleaning",
    "text": "COTAN specific data cleaning\nFirst, we create a directory to store all information regarding the data cleaning.\n\nif(!file.exists(out_dir)){\n  dir.create(file.path(out_dir))\n}\n\nif(!file.exists(paste(out_dir,\"cleaning\", sep = \"\"))){   \n  dir.create(file.path(out_dir, \"cleaning\"))\n}\n\n\ngc()\n\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  5345531 285.5    9300327  496.7   9300327  496.7\nVcells 60316449 460.2  142472060 1087.0 142466152 1087.0\n\nlist[obj,data] = clean(obj)\n\nGenes/cells selection done: dropped [7079] genes and [0] cells\n\n\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.3 GiB\n\npcaCells <- data[[\"pcaCells\"]]\nplots.data <- cleanPlots(obj,pcaCells = data[[\"pcaCells\"]],D = data[[\"D\"]])\n\nplots.data$pcaCells\n\n\n\n\n\npcaCells$code <- str_split(rownames(pcaCells),pattern = \"_\",simplify = T)[,1]\n\nggplot(pcaCells, aes(x=PC1, y=PC2,colour =code)) +\n                  geom_point(alpha = 0.5, size=2)\n\n\n\n\n\nggplot(pcaCells, aes(x=PC1, y=PC3,colour =code)) +\n                  geom_point(alpha = 0.5, size=2)\n\n\n\n\n\nplots.data[[\"genes\"]]\n\n\n\n\nTo color the PCA based on cells’ RNA extraction efficiency\n\nplots.data[[\"UDE\"]]\n\n\n\n\nUDE (color) should not correlate with principal components! This is very important. The next part is used to remove the cells with efficiency too low.\n\nplots.data[[\"nu\"]]\n\n\n\n\nWe can zoom on the smallest values and, if we detect a clear elbow, we can decide to remove the cells.\n\nyset = 0.022#threshold to remove low UDE cells\nplots.data[[\"nu\"]] + \n  ylim(0,0.3) + xlim(0,3000) +\n    geom_hline(yintercept=yset, linetype=\"dashed\", color = \"darkred\") +\n    annotate(geom=\"text\", x=200, y=0.05, \n             label=paste(\"to remove cells with nu < \",yset,sep = \" \"), \n             color=\"darkred\", size=4.5)\n\nWarning: Removed 12705 rows containing missing values (`geom_point()`).\n\n\n\n\n\nFor this round of analysis, we want to keep the low UMI cells to keep a cell population with very low amounts of RNA as neutrophil cells. So we drop only cell with a nu lower then 0.024 here.\n\nobj <-  addElementToMetaDataset(obj,\n                                tag = \"Threshold low UDE cells:\",\n                                value = yset) \nto_rem <-  names(getNu(obj)[which(getNu(obj) < yset)])\n\nobj <-  dropGenesCells(obj,\n                       cells = to_rem)\n\n\nprint(paste(\"Condition \", patient ,sep = \"\"))\n\n[1] \"Condition patient11_ileum\"\n\n#--------------------------------------\nn_cells <-  length(getCellsSize(obj))\nprint(paste(\"n cells\", n_cells, sep = \" \"))\n\n[1] \"n cells 15070\"\n\nn_it <-  1\n\n\nlist[obj,data] <-  clean(obj)\n\nGenes/cells selection done: dropped [1] genes and [0] cells\n\n\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.3 GiB\n\npcaCells <- data[[\"pcaCells\"]]\nplots.data <- cleanPlots(obj,pcaCells = data[[\"pcaCells\"]],D = data[[\"D\"]])\n\nplots.data$pcaCells\n\n\n\n\n\nplots.data$genes\n\n\n\n\n\nplots.data$UDE\n\n\n\n\nFor this round of analysis, we want to keep the low UMI cells to keep a cell population with very low amounts of RNA as neutrophil cells.\n\nscatterPlot(obj,splitPattern = \"[_]\",numCols = 1)\n\n\n\n\n\nsaveRDS(obj,paste0(out_dir,patient,\"_obj_cotan.RDS\"))\n\n\nSession info\n\nsessionInfo()\n\nR version 4.2.2 Patched (2022-11-10 r83330)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.0.0       testthat_3.1.4    stringr_1.4.0     ggrepel_0.9.2    \n[5] ggplot2_3.4.0     Matrix_1.5-1      data.table_1.14.2\n\nloaded via a namespace (and not attached):\n  [1] readxl_1.4.0          circlize_0.4.15       plyr_1.8.7           \n  [4] igraph_1.3.4          lazyeval_0.2.2        sp_1.5-0             \n  [7] splines_4.2.2         listenv_0.8.0         scattermore_0.8      \n [10] usethis_2.1.6         digest_0.6.29         foreach_1.5.2        \n [13] htmltools_0.5.2       viridis_0.6.2         fansi_1.0.3          \n [16] magrittr_2.0.3        memoise_2.0.1         tensor_1.5           \n [19] cluster_2.1.4         doParallel_1.0.17     ROCR_1.0-11          \n [22] remotes_2.4.2         ComplexHeatmap_2.13.0 globals_0.16.2       \n [25] matrixStats_0.63.0    spatstat.sparse_3.0-0 prettyunits_1.1.1    \n [28] colorspace_2.0-3      xfun_0.31             dplyr_1.0.9          \n [31] callr_3.7.0           crayon_1.5.1          jsonlite_1.8.0       \n [34] spatstat.data_3.0-0   progressr_0.11.0      survival_3.4-0       \n [37] zoo_1.8-10            iterators_1.0.14      glue_1.6.2           \n [40] polyclip_1.10-0       gtable_0.3.0          leiden_0.4.2         \n [43] GetoptLong_1.0.5      pkgbuild_1.4.0        RcppZiggurat_0.1.6   \n [46] future.apply_1.10.0   shape_1.4.6           BiocGenerics_0.43.0  \n [49] abind_1.4-5           scales_1.2.0          DBI_1.1.3            \n [52] ggthemes_4.2.4        spatstat.random_3.0-1 miniUI_0.1.1.1       \n [55] Rcpp_1.0.9            viridisLite_0.4.0     xtable_1.8-4         \n [58] clue_0.3-61           reticulate_1.25       spatstat.core_2.4-4  \n [61] stats4_4.2.2          htmlwidgets_1.5.4     httr_1.4.4           \n [64] RColorBrewer_1.1-3    ellipsis_0.3.2        Seurat_4.2.0         \n [67] factoextra_1.0.7      ica_1.0-2             farver_2.1.0         \n [70] pkgconfig_2.0.3       uwot_0.1.14           deldir_1.0-6         \n [73] utf8_1.2.2            labeling_0.4.2        tidyselect_1.2.0     \n [76] rlang_1.0.6           reshape2_1.4.4        later_1.3.0          \n [79] cellranger_1.1.0      munsell_0.5.0         tools_4.2.2          \n [82] cachem_1.0.6          cli_3.4.1             gsubfn_0.7           \n [85] generics_0.1.2        devtools_2.4.3        ggridges_0.5.3       \n [88] evaluate_0.18         fastmap_1.1.0         goftest_1.2-3        \n [91] yaml_2.3.5            processx_3.7.0        knitr_1.40           \n [94] fs_1.5.2              fitdistrplus_1.1-8    purrr_0.3.4          \n [97] RANN_2.6.1            dendextend_1.16.0     nlme_3.1-160         \n[100] pbapply_1.6-0         future_1.29.0         mime_0.12            \n[103] brio_1.1.3            compiler_4.2.2        rstudioapi_0.13      \n[106] plotly_4.10.0         png_0.1-7             spatstat.utils_3.0-1 \n[109] tibble_3.1.7          stringi_1.7.6         ps_1.7.0             \n[112] desc_1.4.1            rgeos_0.5-9           lattice_0.20-45      \n[115] vctrs_0.5.0           pillar_1.8.1          lifecycle_1.0.3      \n[118] spatstat.geom_3.0-3   lmtest_0.9-40         GlobalOptions_0.1.2  \n[121] RcppAnnoy_0.0.19      cowplot_1.1.1         irlba_2.3.5.1        \n[124] httpuv_1.6.5          patchwork_1.1.1       R6_2.5.1             \n[127] promises_1.2.0.1      KernSmooth_2.23-20    gridExtra_2.3        \n[130] IRanges_2.31.2        parallelly_1.32.1     sessioninfo_1.2.2    \n[133] codetools_0.2-18      MASS_7.3-58           assertthat_0.2.1     \n[136] pkgload_1.3.0         proto_1.0.0           rprojroot_2.0.3      \n[139] rjson_0.2.21          withr_2.5.0           SeuratObject_4.1.2   \n[142] sctransform_0.3.5     S4Vectors_0.35.0      mgcv_1.8-41          \n[145] parallel_4.2.2        rpart_4.1.19          grid_4.2.2           \n[148] tidyr_1.2.0           rmarkdown_2.17        Rfast_2.0.6          \n[151] Rtsne_0.16            shiny_1.7.1"
  },
  {
    "objectID": "Crohn_disease/results/04_Data_exploration_clusters_id_patient7_NB.html",
    "href": "Crohn_disease/results/04_Data_exploration_clusters_id_patient7_NB.html",
    "title": "Data exploration patient 7",
    "section": "",
    "text": "Ileum samples\n\nout_dir <- \"../../Crohn_disease/data/04_cluster_identification/\"\nsample.id = \"patient7_ileum\"\n\nobj <- readRDS(paste0(\"../../Crohn_disease/data/03_clustred_data/\",sample.id,\"_merged_cotan.RDS\"))\n#obj <- readRDS(paste0(\"../../Crohn_disease/data/03_clustred_data/\",sample.id,\".cotan.clustered.RDS\"))\n\ncluster assignment with expression increment\n\nexpression.cl <- read.csv(paste0(out_dir,sample.id,\"_expression_clusters.csv\"),row.names = 1)\nmarkers <- readxl::read_excel(\"../../Marker_genes.xlsx\",sheet = 2)\nmarkers <- as.list(markers)\nmarkers <- markers[2:length(markers)]\nfor (nv in names(markers)) {\n  markers[[nv]] <- unique(markers[[nv]][!is.na(markers[[nv]])])\n}\n\nCOEX.markers <- extract.coex(object = obj,genes = unlist(markers)[unlist(markers,) %in% rownames(obj@raw)])\n\n\ngood.markers <- NA\nfor (v in colnames(COEX.markers)) {\n  max.coex <- max(COEX.markers[,v])\n  if (max.coex >= 0.5) {\n    #print(paste0(v,\" max coex \",max.coex))  \n    good.markers <- c(good.markers,v)\n  }\n}\n\nfor (m in names(markers)) {\n  markers[[m]] <- markers[[m]][markers[[m]] %in% good.markers]\n}\n\n\nto.keep <- NA\nfor (v in 1:length(markers)) {\n  #print(markers[[v]])\n  if (length(markers[[v]])>0) {\n    to.keep <- c(to.keep,v)\n  }\n}\nto.keep <- to.keep[!is.na(to.keep)]\n\nmarkers <- markers[to.keep]\nmarkers\n\n$`T cell genes`\n[1] \"CD3D\" \"CD2\"  \"CD7\"  \"CD3G\" \"CD3E\" \"CD4\" \n\n$`B cell genes`\n[1] \"MS4A1\"    \"HLA-DRB1\" \"HLA-DQA1\" \"CD19\"     \"CD79A\"    \"CD79B\"    \"BANK1\"   \n[8] \"IRF8\"     \"PAX5\"    \n\n$`Plasma Cells`\n [1] \"SDC1\"     \"CD38\"     \"CD27\"     \"SSR4\"     \"FKBP11\"   \"HSP90B1\" \n [7] \"SEC11C\"   \"SDF2L1\"   \"DERL3\"    \"XBP1\"     \"MZB1\"     \"TNFRSF17\"\n\n$`Mononuclear Phagocytes`\n[1] \"HLA-DRB1\" \"HLA-DQA1\" \"LYZ\"     \n\n$`Conventional Dendridic Cells`\n [1] \"PPP1R14A\" \"LSP1\"     \"MZT2A\"    \"SLC38A1\"  \"CST7\"     \"DUSP4\"   \n [7] \"FAM118A\"  \"TOMM34\"   \"MCOLN2\"   \"IRF7\"     \"GZMB\"     \"ITGAX\"   \n[13] \"HLA-DRB1\" \"HLA-DQB1\" \"HLA-DRA\" \n\n$Macrophages\n [1] \"CD14\"     \"FCGR3A\"   \"PLA2G7\"   \"CFD\"      \"C1QB\"     \"CTSD\"    \n [7] \"GLUL\"     \"C1QA\"     \"C1QC\"     \"ACP5\"     \"CTSC\"     \"PLD3\"    \n[13] \"MS4A4A\"   \"C5AR1\"    \"C3AR1\"    \"MS4A7\"    \"TFEC\"     \"FAM198B\" \n[19] \"CD163\"    \"SDS\"      \"FPR3\"     \"MAFB\"     \"DAB2\"     \"LIPA\"    \n[25] \"TFRC\"     \"CD68\"     \"HLA-DRB1\" \"HLA-DQB1\" \"HLA-DRA\" \n\n$`ILCs - Cytotoxic natural killer`\n[1] \"EOMES\" \"TBX21\" \"GZMA\"  \"PRF1\"  \"GNLY\"  \"KLRD1\" \"NKG7\" \n\n$ILC1s\n [1] \"KLRB1\" \"TBX21\" \"IFNG\"  \"IL7R\"  \"CD3G\"  \"CD3E\"  \"CD3D\"  \"CD4\"   \"CD5\"  \n[10] \"CD27\"  \"LEF1\" \n\n$ILC2s\n[1] \"KLRB1\"   \"IL7R\"    \"GATA3\"   \"MAF\"     \"HPGD\"    \"HPGDS\"   \"TNFSF10\"\n\n$ILC3\n[1] \"KLRB1\" \"IL7R\"  \"RORC\"  \"IL17A\" \"IL22\"  \"IL23R\" \"IL1R1\" \"KIT\"  \n\n$`Mast cells`\n[1] \"TPSAB1\" \"KIT\"    \"FCER1A\" \"TPSB2\" \n\n$`Stroma/glia`\n[1] \"PLVAP\"  \"VWF\"    \"COL3A1\" \"COL1A1\" \"ACTA2\"  \"GPM6B\"  \"S100B\" \n\n$`CD36 endothelial`\n[1] \"CD36\"    \"TNFSF10\"\n\n$Fibroblast\n[1] \"CXCL14\" \"IL17A\"  \"CXCL12\" \"CCL8\"   \"CCL13\"  \"CCL11\"  \"CCL2\"  \n\n$Neutrophils\n[1] \"FCGR3A\" \"CSF3R\"  \"FPR1\"   \"NAMPT\"  \"MNDA\"  \n\n\n\ndf <- as.data.frame(matrix(nrow = length(names(markers)),ncol = ncol(expression.cl)))\nrownames(df) <- names(markers)\ncolnames(df) <- colnames(expression.cl)\ndf2 <- df\n\nteta <- -1/0.1 * (log(0.25))\n#not_ass_clusters <- NA\nfor (ro in colnames(df)) {\n  for (m in names(markers)) {\n    #print(m)\n    #pv <- p_value[unlist(markers[[m]]),ro]\n    #co <- obj@cluster_data[unlist(markers[[m]]),ro]\n    ex <- expression.cl[rownames(expression.cl) %in% markers[[m]],ro]\n    ex[ex < 0 & !is.na(ex)] <- 0\n    \n    ex <- 1-exp(- teta * ex)\n    n.markers <- sum(rownames(obj@raw) %in% markers[[m]])\n    df[m,ro] <- sum(ex,na.rm = T)/n.markers\n    df2[m,ro]<- paste0(round(sum(ex,na.rm = T),digits = 1),\"/\",n.markers)\n  }\n}\n#write.csv(df,file = paste(out_dir,sample.id,\"_markers_clusters_expression.csv\", sep = \"\"))\n\ndf <- round(df,digits = 2)\ndf <- df[,2:ncol(df)]\n\n\ndf2 <- df2[,2:ncol(df2)]\ndf2\n\n                                  cl.1  cl.37   cl.30   cl.7   cl.2   cl.0\nT cell genes                       0/6    0/6   0.4/6    0/6  5.1/6  4.9/6\nB cell genes                     0.3/9    0/9   2.3/9  7.5/9    0/9    0/9\nPlasma Cells                    0.1/12 1.8/12  1.9/12 0.3/12   2/12 0.6/12\nMononuclear Phagocytes             0/3    0/3   2.9/3    2/3    0/3    0/3\nConventional Dendridic Cells    1.2/15 0.7/15  4.1/15 3.7/15 4.7/15 2.9/15\nMacrophages                     0.4/29   4/29 22.3/29   3/29 2.6/29 0.2/29\nILCs - Cytotoxic natural killer  0.6/7    0/7     0/7    0/7  2.9/7    3/7\nILC1s                           0.6/11   0/11  0.4/11 0.3/11 6.3/11 6.4/11\nILC2s                              0/7  1.1/7   0.3/7    0/7  2.6/7  2.8/7\nILC3                             0.2/8  0.7/8   0.3/8    0/8  1.5/8  2.5/8\nMast cells                       0.3/4    0/4     0/4    0/4    0/4    0/4\nStroma/glia                      0.4/7  3.3/7   0.1/7    0/7  0.3/7  0.2/7\nCD36 endothelial                   0/2  0.6/2   0.8/2    0/2  0.1/2    0/2\nFibroblast                       0.1/7  4.4/7   0.4/7  0.1/7  0.1/7  0.2/7\nNeutrophils                      0.2/5  0.7/5   3.8/5  0.1/5  0.8/5    0/5\n                                 cl.20  cl.21  cl.25   cl.8  cl.32  cl.12\nT cell genes                       0/6    0/6    0/6  0.5/6  4.3/6  2.7/6\nB cell genes                     8.3/9  8.1/9    1/9    0/9    0/9  0.7/9\nPlasma Cells                      0/12 0.4/12 1.9/12 1.5/12   0/12 1.3/12\nMononuclear Phagocytes             2/3    2/3  1.6/3    0/3    0/3  0.4/3\nConventional Dendridic Cells    3.4/15 3.9/15   2/15   1/15 1.1/15 4.4/15\nMacrophages                     3.3/29   4/29 2.4/29 8.4/29 0.7/29 2.1/29\nILCs - Cytotoxic natural killer    0/7    0/7    0/7    0/7  2.4/7    3/7\nILC1s                             0/11 0.4/11   0/11 0.5/11 5.7/11 2.6/11\nILC2s                              0/7    0/7  0.5/7  1.3/7  2.6/7  1.1/7\nILC3                               0/8    0/8    0/8    0/8  2.9/8  0.9/8\nMast cells                         0/4    0/4  0.4/4    0/4    0/4    0/4\nStroma/glia                      0.4/7    0/7    0/7  6.1/7  0.4/7  0.1/7\nCD36 endothelial                   0/2    0/2  0.5/2  1.7/2    0/2  0.2/2\nFibroblast                         0/7    0/7  0.1/7    6/7    1/7    0/7\nNeutrophils                        0/5  0.3/5    0/5    0/5    0/5  0.3/5\n                                 cl.34  cl.35 cl.36  cl.14  cl.17   cl.5  cl.11\nT cell genes                       0/6    0/6   0/6    0/6  0.5/6    0/6  1.1/6\nB cell genes                     0.8/9  0.6/9 0.7/9    0/9    0/9  0.3/9  0.6/9\nPlasma Cells                    8.6/12 7.2/12  9/12 3.4/12 3.1/12 9.9/12 0.9/12\nMononuclear Phagocytes             0/3    0/3   0/3    0/3  0.9/3    0/3    0/3\nConventional Dendridic Cells      0/15   0/15  1/15 0.9/15 2.1/15   0/15 4.8/15\nMacrophages                       0/29   0/29  0/29 3.3/29  13/29 0.3/29 1.9/29\nILCs - Cytotoxic natural killer    0/7    0/7 1.2/7    0/7    0/7  0.1/7  5.3/7\nILC1s                           0.6/11   0/11  1/11 0.1/11 0.5/11 0.8/11 1.9/11\nILC2s                              0/7    0/7   0/7  2.9/7  0.6/7  0.2/7  2.4/7\nILC3                               0/8    0/8   0/8    1/8  0.9/8  0.2/8  3.9/8\nMast cells                         0/4    0/4   0/4    4/4    0/4    1/4  0.7/4\nStroma/glia                        0/7    0/7 0.9/7    0/7  0.5/7  0.2/7    0/7\nCD36 endothelial                   0/2    0/2   0/2    1/2  0.6/2  0.3/2    0/2\nFibroblast                       0.3/7    0/7   0/7    0/7  0.9/7    0/7    0/7\nNeutrophils                        0/5    0/5   0/5    0/5  3.6/5    0/5  0.6/5\n                                  cl.26  cl.16   cl.27   cl.28  cl.22   cl.4\nT cell genes                        0/6    0/6   0.4/6   0.5/6    0/6  3.6/6\nB cell genes                      2.5/9  1.9/9     2/9     2/9  0.7/9  0.3/9\nPlasma Cells                     1.3/12   0/12  1.3/12    1/12 8.7/12   0/12\nMononuclear Phagocytes            2.8/3  2.7/3     3/3     3/3    0/3    0/3\nConventional Dendridic Cells     4.8/15 7.1/15  3.8/15  4.2/15   0/15 2.4/15\nMacrophages                     11.1/29 5.8/29 24.4/29 21.3/29 0.2/29   0/29\nILCs - Cytotoxic natural killer     0/7    0/7     0/7   0.3/7    0/7  4.1/7\nILC1s                              0/11 0.2/11  0.4/11  0.5/11 0.3/11 4.1/11\nILC2s                               0/7  0.1/7   0.8/7   0.6/7    0/7  3.5/7\nILC3                                0/8  0.6/8     0/8     0/8    0/8  2.1/8\nMast cells                          0/4    0/4     0/4   0.7/4    0/4    0/4\nStroma/glia                       0.3/7  0.2/7     0/7   0.4/7    0/7  0.1/7\nCD36 endothelial                  0.2/2    0/2   1.4/2   1.2/2    0/2    0/2\nFibroblast                        0.4/7    0/7   0.9/7   1.5/7    0/7    0/7\nNeutrophils                       2.1/5    1/5   2.9/5     1/5    0/5    0/5\n                                  cl.9   cl.31  cl.10  cl.33   cl.18  cl.24\nT cell genes                       0/6     0/6  5.1/6    0/6   0.4/6  4.3/6\nB cell genes                     1.1/9   2.1/9    0/9    0/9   2.4/9    0/9\nPlasma Cells                    1.5/12    1/12 0.7/12 8.2/12  1.5/12   0/12\nMononuclear Phagocytes           1.1/3   2.9/3    0/3    0/3   2.8/3    0/3\nConventional Dendridic Cells    3.1/15    4/15   2/15 0.5/15  6.5/15 2.1/15\nMacrophages                     4.9/29 17.2/29   0/29 0.5/29 15.5/29   1/29\nILCs - Cytotoxic natural killer    0/7     0/7    0/7  0.6/7     0/7  0.1/7\nILC1s                           0.3/11    0/11 6.9/11   0/11  0.4/11 4.8/11\nILC2s                            0.9/7     0/7  2.5/7    0/7     0/7  3.2/7\nILC3                             0.6/8   0.6/8  1.9/8  0.4/8   0.2/8  2.9/8\nMast cells                         0/4     0/4    0/4    0/4   0.7/4    0/4\nStroma/glia                        2/7     0/7  0.5/7    0/7   0.3/7  0.9/7\nCD36 endothelial                 1.8/2   0.2/2    0/2    0/2   0.5/2    0/2\nFibroblast                         1/7   0.5/7  0.1/7  0.2/7   0.2/7  0.6/7\nNeutrophils                      0.8/5   3.2/5    0/5    0/5     3/5  0.6/5\n                                 cl.38  cl.19  cl.39  cl.29  cl.15\nT cell genes                     0.2/6    0/6    0/6  2.9/6    0/6\nB cell genes                     0.3/9  1.5/9    1/9  0.1/9  1.6/9\nPlasma Cells                    0.9/12 9.7/12 2.4/12 5.9/12 1.1/12\nMononuclear Phagocytes           0.2/3    0/3    1/3    0/3    1/3\nConventional Dendridic Cells    1.3/15   0/15 2.7/15 1.2/15 2.7/15\nMacrophages                     7.6/29 0.8/29 4.3/29 0.2/29 5.8/29\nILCs - Cytotoxic natural killer    0/7  0.3/7    0/7  1.8/7    0/7\nILC1s                           0.2/11 0.6/11   0/11 3.6/11   0/11\nILC2s                            1.5/7    0/7  1.3/7    2/7  0.3/7\nILC3                               1/8    0/8  0.6/8  2.1/8  0.4/8\nMast cells                       0.1/4    0/4    0/4    0/4  0.4/4\nStroma/glia                      2.9/7  0.2/7    0/7  0.6/7  4.9/7\nCD36 endothelial                 0.9/2    0/2    1/2    0/2  0.2/2\nFibroblast                         6/7  0.1/7  0.3/7  0.2/7  2.4/7\nNeutrophils                        0/5    0/5    0/5    0/5    0/5\n\n\n\ncluster_data <- obj@cluster_data\n\n######## This is the best: cosine dissimilarity\nMatrix <- as.matrix(t(cluster_data))\nsim <- Matrix / sqrt(rowSums(Matrix * Matrix))\nsim <- sim %*% t(sim)\nD_sim <- as.dist(1 - sim)\ntree <- hclust(D_sim,method = \"ward.D2\")\n\n\ndend <- as.dendrogram(tree)\n#colnames(df) <- str_remove_all(colnames(df), pattern = \"cl.\")\ncut = cutree(tree, k = 9)\ndend =branches_color(dend,k=9,col=c(\"#4DBBD5FF\",\"#91D1C2FF\",\"#E64B35FF\",\"gray80\",\"#3C5488FF\",\"#F39B7FFF\",\"gray80\"),groupLabels = T)\n\nWarning in get_col(col, k): Length of color vector was shorter than the number\nof clusters - color vector was recycled\n\ndend =color_labels(dend,k=9)\n\nplot(dend)\n\n\n\n\n\ncol_fun = colorRamp2(c(0, 1), c( \"lightblue\", \"red\"))\nHeatmap(df, rect_gp = gpar(col = \"white\", lwd = 1),\n        cluster_rows = T,\n        #cluster_columns = FALSE,\n        show_heatmap_legend = F,\n         col = col_fun,\n        column_dend_height = unit(4, \"cm\"),\n        row_dend_width\n        = unit(4, \"cm\"),\n        #width =  unit(24, \"cm\"),\n        #height = unit(6, \"cm\"),\n        cluster_columns = dend,\n        row_names_gp = gpar(fontsize = 7),\n        column_names_gp = gpar(fontsize = 7),\n        cell_fun = function(j, i, x, y, width, height, fill) {\n        grid.text(sprintf(\"%.1f\", df[i, j]), x, y, gp = gpar(fontsize = 5))\n},\nleft_annotation = rowAnnotation(foo = anno_block(gp = gpar(fill = 2:4),\n        labels = c(\"group1\", \"group2\", \"group3\",\"\",\"\",\"\",\"\"), \n        labels_gp = gpar(col = \"white\", fontsize = 10))),\n    row_km = 7\n)\n\nWarning: The input is a data frame-like object, convert it to a matrix."
  },
  {
    "objectID": "Crohn_disease/results/04_Data_exploration_clusters_id_patient5_NB.html",
    "href": "Crohn_disease/results/04_Data_exploration_clusters_id_patient5_NB.html",
    "title": "Data exploration patient 5",
    "section": "",
    "text": "Ileum samples\n\nout_dir <- \"../../Crohn_disease/data/04_cluster_identification/\"\nsample.id = \"patient5_ileum\"\n\nobj <- readRDS(paste0(\"../../Crohn_disease/data/03_clustred_data/\",sample.id,\"_merged_cotan.RDS\"))\n\nsrt <- readRDS(paste0(\"../data/03_clustred_data/Seurat_obj_\",sample.id,\"_with_cotan_clusters_merged.RDS\"))\n#obj <- readRDS(paste0(\"../../Crohn_disease/data/03_clustred_data/\",sample.id,\".cotan.clustered.RDS\"))\n\ncluster assignment with expression increment\n\nexpression.cl <- read.csv(paste0(out_dir,sample.id,\"_expression_clusters.csv\"),row.names = 1)\nmarkers <- readxl::read_excel(\"../../Marker_genes.xlsx\",sheet = 2)\nmarkers <- as.list(markers)\nmarkers <- markers[2:length(markers)]\nfor (nv in names(markers)) {\n  markers[[nv]] <- unique(markers[[nv]][!is.na(markers[[nv]])])\n}\n\nCOEX.markers <- extract.coex(object = obj,genes = unlist(markers)[unlist(markers,) %in% rownames(obj@raw)])\n\n\ngood.markers <- NA\nfor (v in colnames(COEX.markers)) {\n  max.coex <- max(COEX.markers[,v])\n  if (max.coex >= 0.4) {\n    #print(paste0(v,\" max coex \",max.coex))  \n    good.markers <- c(good.markers,v)\n  }\n}\n\nfor (m in names(markers)) {\n  markers[[m]] <- markers[[m]][markers[[m]] %in% good.markers]\n}\n\n\nto.keep <- NA\nfor (v in 1:length(markers)) {\n  #print(markers[[v]])\n  if (length(markers[[v]])>0) {\n    to.keep <- c(to.keep,v)\n  }\n}\nto.keep <- to.keep[!is.na(to.keep)]\n\nmarkers <- markers[to.keep]\nmarkers\n\n$`T cell genes`\n[1] \"CD3D\" \"CD2\"  \"CD7\"  \"CD3G\" \"CD3E\" \"CD4\" \n\n$`B cell genes`\n[1] \"MS4A1\"    \"HLA-DRB1\" \"HLA-DQA1\" \"CD19\"     \"CD79A\"    \"CD79B\"    \"BANK1\"   \n[8] \"IRF8\"    \n\n$`Plasma Cells`\n [1] \"SDC1\"     \"CD38\"     \"CD27\"     \"SSR4\"     \"FKBP11\"   \"HSP90B1\" \n [7] \"SEC11C\"   \"SDF2L1\"   \"DERL3\"    \"XBP1\"     \"MZB1\"     \"TNFRSF17\"\n\n$`Mononuclear Phagocytes`\n[1] \"HLA-DRB1\" \"HLA-DQA1\" \"LYZ\"     \n\n$`Conventional Dendridic Cells`\n [1] \"PPP1R14A\" \"LSP1\"     \"MZT2A\"    \"SLC38A1\"  \"CST7\"     \"DUSP4\"   \n [7] \"FAM118A\"  \"TOMM34\"   \"IRF7\"     \"GZMB\"     \"HLA-DRB1\" \"HLA-DQB1\"\n[13] \"HLA-DRA\" \n\n$Macrophages\n [1] \"CD14\"     \"CFD\"      \"C1QB\"     \"CTSD\"     \"GLUL\"     \"C1QA\"    \n [7] \"C1QC\"     \"ACP5\"     \"CTSC\"     \"PLD3\"     \"MS4A4A\"   \"VSIG4\"   \n[13] \"C5AR1\"    \"C3AR1\"    \"MS4A7\"    \"CD163\"    \"MAFB\"     \"DAB2\"    \n[19] \"LIPA\"     \"TFRC\"     \"CD68\"     \"HLA-DRB1\" \"HLA-DQB1\" \"HLA-DRA\" \n\n$`ILCs - Cytotoxic natural killer`\n[1] \"TBX21\" \"GZMA\"  \"PRF1\"  \"GNLY\"  \"KLRD1\" \"NKG7\" \n\n$ILC1s\n [1] \"KLRB1\" \"TBX21\" \"IFNG\"  \"IL7R\"  \"CD3G\"  \"CD3E\"  \"CD3D\"  \"CD4\"   \"CD5\"  \n[10] \"CD27\"  \"LEF1\" \n\n$ILC2s\n[1] \"KLRB1\"   \"IL7R\"    \"GATA3\"   \"MAF\"     \"HPGD\"    \"HPGDS\"   \"TNFSF10\"\n\n$ILC3\n[1] \"KLRB1\" \"IL7R\"  \"IL17A\" \"IL22\"  \"IL1R1\"\n\n$`Mast cells`\n[1] \"TPSAB1\" \"FCER1A\" \"TPSB2\" \n\n$`Stroma/glia`\n[1] \"PLVAP\"  \"VWF\"    \"COL3A1\" \"COL1A1\" \"ACTA2\"  \"GPM6B\"  \"S100B\" \n\n$`CD36 endothelial`\n[1] \"CD36\"    \"TNFSF10\"\n\n$Fibroblast\n[1] \"CXCL14\" \"IL17A\"  \"CXCL12\" \"CCL8\"   \"CCL13\"  \"CCL2\"  \n\n$Neutrophils\n[1] \"NAMPT\" \"MNDA\" \n\n\n\ndf <- as.data.frame(matrix(nrow = length(names(markers)),ncol = ncol(expression.cl)))\nrownames(df) <- names(markers)\ncolnames(df) <- colnames(expression.cl)\ndf2 <- df\n\nteta <- -1/0.1 * (log(0.25))\n#not_ass_clusters <- NA\nfor (ro in colnames(df)) {\n  for (m in names(markers)) {\n    #print(m)\n    #pv <- p_value[unlist(markers[[m]]),ro]\n    #co <- obj@cluster_data[unlist(markers[[m]]),ro]\n    ex <- expression.cl[rownames(expression.cl) %in% markers[[m]],ro]\n    ex[ex < 0 & !is.na(ex)] <- 0\n    \n    ex <- 1-exp(- teta * ex)\n    n.markers <- sum(rownames(obj@raw) %in% markers[[m]])\n    df[m,ro] <- sum(ex,na.rm = T)/n.markers\n    df2[m,ro]<- paste0(round(sum(ex,na.rm = T),digits = 1),\"/\",n.markers)\n  }\n}\n#write.csv(df,file = paste(out_dir,sample.id,\"_markers_clusters_expression.csv\", sep = \"\"))\n\ndf <- round(df,digits = 2)\ndf <- df[,2:ncol(df)]\n\n\ndf2 <- df2[,2:ncol(df2)]\ndf2\n\n                                 cl.26  cl.64   cl.1  cl.14   cl.2  cl.31\nT cell genes                       0/6  4.4/6    5/6    0/6  4.8/6  0.1/6\nB cell genes                     7.7/8    0/8    0/8    1/8    0/8  1.4/8\nPlasma Cells                      0/12   0/12   0/12 9.2/12   0/12 1.3/12\nMononuclear Phagocytes             2/3    0/3    0/3    0/3    0/3  0.9/3\nConventional Dendridic Cells    4.4/13 2.5/13 2.8/13 0.1/13 4.8/13 2.8/13\nMacrophages                     3.8/24 0.3/24 0.9/24   0/24 1.3/24 4.1/24\nILCs - Cytotoxic natural killer    0/6  0.1/6  0.5/6    0/6    5/6  0.3/6\nILC1s                             0/11 4.8/11 6.6/11 0.7/11 6.4/11 0.1/11\nILC2s                              0/7  2.3/7    3/7    0/7  2.5/7  0.6/7\nILC3                               0/5  2.1/5  2.9/5    0/5  1.7/5    0/5\nMast cells                         0/3    0/3    0/3    0/3    0/3  0.2/3\nStroma/glia                      0.1/7  0.2/7  0.1/7    0/7  0.1/7  0.6/7\nCD36 endothelial                   0/2  0.1/2  0.1/2    0/2    0/2  0.3/2\nFibroblast                         0/6  0.5/6  0.2/6    0/6    0/6  0.3/6\nNeutrophils                      0.4/2  0.2/2  0.1/2    0/2  0.3/2  0.1/2\n                                 cl.65   cl.50   cl.0   cl.5  cl.18  cl.32\nT cell genes                     0.9/6   0.3/6    0/6    0/6  1.9/6    0/6\nB cell genes                       0/8   2.5/8  0.5/8    0/8  0.1/8  1.1/8\nPlasma Cells                    0.2/12    0/12 7.2/12 7.2/12   0/12   0/12\nMononuclear Phagocytes             0/3     3/3    0/3    0/3    0/3    1/3\nConventional Dendridic Cells    1.6/13  4.6/13   0/13 0.5/13 2.4/13 2.9/13\nMacrophages                     1.6/24 17.4/24   0/24 1.1/24 1.9/24 4.9/24\nILCs - Cytotoxic natural killer    0/6     0/6    0/6    0/6  1.3/6    0/6\nILC1s                             0/11  1.2/11 0.3/11 0.5/11   2/11 0.2/11\nILC2s                            0.6/7   1.6/7    0/7  0.1/7  3.1/7    1/7\nILC3                               0/5   1.3/5    0/5  0.1/5    3/5    0/5\nMast cells                         0/3     1/3    0/3    0/3    0/3    0/3\nStroma/glia                        0/7     1/7    0/7    0/7  0.7/7    3/7\nCD36 endothelial                   0/2   0.8/2    0/2  0.5/2    0/2  0.8/2\nFibroblast                         0/6   0.6/6    0/6  0.7/6  0.1/6  1.5/6\nNeutrophils                        0/2   0.1/2    0/2  0.3/2  0.6/2    0/2\n                                 cl.33   cl.57  cl.59   cl.6   cl.7  cl.70\nT cell genes                     0.5/6   0.7/6    1/6    0/6  5.3/6  4.8/6\nB cell genes                       0/8   2.4/8    0/8    0/8    0/8    0/8\nPlasma Cells                    0.8/12    0/12   0/12   0/12 0.5/12 0.2/12\nMononuclear Phagocytes             0/3     3/3  0.7/3    0/3    0/3    0/3\nConventional Dendridic Cells    1.5/13  4.2/13 0.9/13   1/13 2.5/13 1.5/13\nMacrophages                     4.5/24 20.1/24 0.4/24 5.2/24 0.6/24 1.9/24\nILCs - Cytotoxic natural killer    0/6   0.1/6  0.5/6    0/6  0.1/6  1.9/6\nILC1s                           0.5/11  0.7/11 0.4/11 0.1/11 6.7/11 7.1/11\nILC2s                            0.7/7   0.4/7  1.8/7  0.3/7  2.5/7  2.4/7\nILC3                             0.6/5   0.1/5    0/5  0.8/5  1.9/5  1.9/5\nMast cells                         0/3     1/3    0/3    0/3    0/3    0/3\nStroma/glia                      3.2/7   0.2/7    0/7  3.1/7  0.2/7  1.5/7\nCD36 endothelial                 0.1/2   0.7/2  0.8/2  0.2/2  0.1/2    0/2\nFibroblast                       2.8/6   0.8/6    0/6  2.2/6  0.2/6    0/6\nNeutrophils                        0/2     1/2    0/2  0.3/2  0.2/2    0/2\n                                 cl.27  cl.36  cl.41  cl.37  cl.34  cl.47\nT cell genes                     2.7/6    0/6    0/6    0/6    0/6  1.1/6\nB cell genes                     0.1/8    0/8  1.2/8  0.5/8  0.7/8  4.4/8\nPlasma Cells                    0.8/12 5.7/12 8.7/12 7.6/12   8/12   0/12\nMononuclear Phagocytes             0/3    0/3    0/3    0/3    0/3  1.9/3\nConventional Dendridic Cells    1.8/13 0.1/13 0.3/13   0/13   0/13 6.2/13\nMacrophages                     1.9/24   0/24 0.2/24   0/24   0/24   5/24\nILCs - Cytotoxic natural killer  0.8/6    0/6    0/6    0/6    0/6  0.3/6\nILC1s                           1.8/11   0/11 0.8/11 0.3/11 0.5/11 1.2/11\nILC2s                            2.4/7    0/7    0/7    0/7    0/7  1.4/7\nILC3                             1.5/5    0/5    0/5    0/5    0/5  1.8/5\nMast cells                         0/3    0/3    0/3    0/3    0/3    0/3\nStroma/glia                        0/7    0/7    0/7    0/7    0/7  0.5/7\nCD36 endothelial                 0.5/2    0/2    0/2    0/2    0/2  0.2/2\nFibroblast                         1/6    0/6    0/6    0/6    0/6  0.3/6\nNeutrophils                        1/2    0/2    0/2    0/2    0/2    0/2\n                                 cl.35  cl.24 cl.20   cl.3  cl.61  cl.23  cl.16\nT cell genes                       0/6  0.7/6   0/6  0.3/6  4.5/6    0/6    0/6\nB cell genes                       1/8  0.4/8   0/8  0.3/8    0/8    0/8  0.9/8\nPlasma Cells                    0.7/12 4.3/12  0/12 5.8/12   0/12 6.3/12   7/12\nMononuclear Phagocytes             1/3  0.4/3   0/3    0/3    0/3    0/3    0/3\nConventional Dendridic Cells    2.6/13 1.2/13  0/13 0.1/13 0.9/13 0.1/13 1.5/13\nMacrophages                       2/24   1/24  0/24   0/24 0.2/24 0.1/24   1/24\nILCs - Cytotoxic natural killer  0.2/6    0/6   0/6  0.1/6  1.3/6    0/6    0/6\nILC1s                             0/11 1.1/11  0/11 0.6/11 5.5/11 0.2/11 0.3/11\nILC2s                            0.8/7  0.5/7   0/7  0.1/7  2.6/7  0.3/7    0/7\nILC3                               0/5    0/5   0/5  0.1/5  2.2/5    0/5    0/5\nMast cells                         0/3    0/3   0/3    0/3    0/3    0/3    0/3\nStroma/glia                      2.1/7    0/7   0/7    0/7  0.4/7    0/7    0/7\nCD36 endothelial                 0.8/2  0.5/2   0/2    0/2    0/2    0/2    0/2\nFibroblast                         1/6    0/6   0/6    0/6    0/6    0/6    0/6\nNeutrophils                      0.8/2  0.8/2   0/2    0/2  0.5/2    0/2    0/2\n                                 cl.48   cl.9  cl.19  cl.11  cl.22  cl.66\nT cell genes                       0/6  0.8/6    0/6    0/6    0/6    0/6\nB cell genes                     0.9/8    0/8    0/8  0.1/8    0/8  1.3/8\nPlasma Cells                    5.9/12 2.9/12   5/12 8.2/12 1.1/12 0.6/12\nMononuclear Phagocytes           0.6/3    0/3    0/3    0/3    0/3    1/3\nConventional Dendridic Cells    2.2/13 1.2/13 0.7/13 0.1/13 0.5/13 2.7/13\nMacrophages                     2.9/24 2.7/24   0/24 0.2/24 1.8/24   6/24\nILCs - Cytotoxic natural killer  0.6/6  0.3/6    0/6    0/6    0/6    0/6\nILC1s                             0/11   2/11 0.9/11   0/11   0/11 0.1/11\nILC2s                              0/7    2/7    0/7    0/7  0.4/7  0.9/7\nILC3                               0/5  2.5/5    0/5    0/5    0/5  0.2/5\nMast cells                       0.6/3    0/3    0/3    0/3    0/3    0/3\nStroma/glia                        0/7    0/7  0.5/7    0/7    0/7  2.9/7\nCD36 endothelial                   0/2    0/2    0/2    0/2  0.4/2  1.9/2\nFibroblast                         0/6  0.7/6    0/6    0/6    0/6  1.3/6\nNeutrophils                      0.4/2  0.7/2    0/2    0/2  0.1/2  0.3/2\n                                 cl.10  cl.12   cl.8  cl.38   cl.51  cl.25\nT cell genes                       0/6    0/6  0.5/6    0/6   0.6/6  1.7/6\nB cell genes                     1.3/8    0/8  0.3/8  0.3/8     2/8    0/8\nPlasma Cells                      6/12   0/12   0/12   7/12  0.2/12 1.1/12\nMononuclear Phagocytes             0/3    0/3    0/3    0/3     3/3    0/3\nConventional Dendridic Cells    0.4/13 0.1/13 1.8/13 0.7/13  4.9/13 3.1/13\nMacrophages                     1.1/24 3.7/24   6/24 2.2/24 20.5/24 0.9/24\nILCs - Cytotoxic natural killer    0/6    0/6  0.1/6    0/6     0/6  2.9/6\nILC1s                             0/11   0/11 0.6/11 0.6/11  0.6/11 3.9/11\nILC2s                              0/7  2.7/7  1.2/7    0/7   1.1/7  0.5/7\nILC3                               0/5  0.1/5    1/5  0.2/5   0.1/5  0.5/5\nMast cells                         0/3    3/3    0/3    0/3   0.9/3    0/3\nStroma/glia                      0.6/7  0.1/7  2.9/7  1.8/7   0.3/7    0/7\nCD36 endothelial                   0/2  0.7/2  0.5/2    0/2     1/2    0/2\nFibroblast                       0.2/6  0.2/6  4.9/6  3.2/6   0.4/6  0.8/6\nNeutrophils                        0/2  0.2/2  0.7/2    0/2   0.1/2  0.7/2\n                                 cl.13  cl.62  cl.67   cl.58   cl.4  cl.42\nT cell genes                       0/6  3.9/6  0.3/6   0.6/6  4.9/6    0/6\nB cell genes                     0.4/8    0/8    0/8   2.5/8    1/8    0/8\nPlasma Cells                    5.5/12   0/12 0.5/12  0.3/12 0.7/12   0/12\nMononuclear Phagocytes             0/3    0/3    0/3     3/3    1/3    0/3\nConventional Dendridic Cells    0.4/13 1.8/13 0.3/13  5.3/13 7.8/13 0.6/13\nMacrophages                     0.3/24   3/24 2.2/24 16.9/24 4.9/24   1/24\nILCs - Cytotoxic natural killer    0/6  2.1/6    0/6     0/6  4.2/6    0/6\nILC1s                             0/11 3.9/11 0.3/11  0.6/11   6/11   0/11\nILC2s                              0/7  1.9/7    1/7   0.4/7  1.3/7  1.6/7\nILC3                               0/5    1/5  0.4/5   0.1/5  0.5/5    0/5\nMast cells                         0/3  0.3/3    0/3     1/3    0/3    0/3\nStroma/glia                        0/7    0/7    0/7   0.4/7  0.2/7    0/7\nCD36 endothelial                   0/2    0/2    0/2     1/2  0.1/2  0.6/2\nFibroblast                       0.3/6    0/6    0/6   0.2/6    0/6  0.1/6\nNeutrophils                        0/2    0/2  0.2/2   1.6/2  0.6/2  0.2/2\n                                 cl.44  cl.21   cl.49  cl.52  cl.30  cl.39\nT cell genes                     0.5/6  0.1/6   0.7/6    5/6  0.6/6  4.3/6\nB cell genes                     0.7/8    0/8   2.9/8    0/8  1.7/8  1.8/8\nPlasma Cells                      0/12 0.3/12  0.9/12   0/12 4.5/12 0.2/12\nMononuclear Phagocytes             0/3    0/3     3/3    0/3  0.8/3  1.6/3\nConventional Dendridic Cells    0.8/13   2/13  4.9/13 4.1/13 4.8/13 7.2/13\nMacrophages                     0.9/24 4.2/24 15.6/24 2.9/24 3.1/24 5.1/24\nILCs - Cytotoxic natural killer    0/6  0.2/6     0/6  1.3/6  0.9/6  4.1/6\nILC1s                           0.1/11 0.1/11  0.7/11 5.5/11 1.3/11   5/11\nILC2s                            1.6/7  0.2/7     0/7  3.2/7  0.1/7  3.6/7\nILC3                               0/5  0.4/5     0/5  2.7/5    0/5  2.9/5\nMast cells                         0/3    0/3     1/3    0/3    0/3    0/3\nStroma/glia                        0/7  3.8/7     0/7  0.2/7    0/7  0.7/7\nCD36 endothelial                 0.6/2    1/2     0/2  0.3/2  0.1/2  0.4/2\nFibroblast                         0/6  1.7/6   0.9/6  0.4/6    0/6  0.5/6\nNeutrophils                      0.8/2  0.6/2   1.9/2  0.9/2  0.4/2  1.1/2\n                                 cl.40  cl.53  cl.45  cl.54  cl.68   cl.15\nT cell genes                       0/6  0.4/6    5/6    0/6    0/6   0.7/6\nB cell genes                     1.4/8  2.9/8    0/8  7.8/8    1/8   2.7/8\nPlasma Cells                      0/12 0.2/12 0.3/12   0/12 0.2/12    0/12\nMononuclear Phagocytes             1/3    3/3    0/3    2/3    1/3   2.9/3\nConventional Dendridic Cells    2.5/13 7.7/13 3.1/13 5.3/13 4.4/13  3.6/13\nMacrophages                     4.4/24 5.2/24 1.2/24 3.9/24 4.7/24 21.5/24\nILCs - Cytotoxic natural killer  0.5/6  0.1/6  0.1/6  0.1/6  0.3/6   0.2/6\nILC1s                             0/11 0.5/11 6.1/11 0.1/11   0/11  0.7/11\nILC2s                              1/7    0/7  2.4/7    0/7  0.9/7   0.1/7\nILC3                               0/5    0/5  1.3/5    0/5  0.4/5     0/5\nMast cells                         0/3  0.5/3    0/3    0/3    0/3   0.5/3\nStroma/glia                        2/7  1.1/7  0.2/7    0/7  2.3/7   0.9/7\nCD36 endothelial                   2/2    0/2  0.1/2    0/2  1.9/2   0.7/2\nFibroblast                       1.5/6  0.1/6  0.1/6    0/6  1.5/6   0.4/6\nNeutrophils                      0.4/2    0/2  0.3/2  0.8/2  0.1/2   1.5/2\n                                 cl.55  cl.17  cl.43  cl.56\nT cell genes                       0/6    0/6    0/6  5.6/6\nB cell genes                     7.7/8    0/8    1/8  0.5/8\nPlasma Cells                    0.4/12   1/12 6.1/12   0/12\nMononuclear Phagocytes             2/3    0/3    0/3  0.1/3\nConventional Dendridic Cells    6.5/13 0.6/13 0.7/13 5.4/13\nMacrophages                     5.2/24   5/24 0.7/24 2.9/24\nILCs - Cytotoxic natural killer  0.2/6    0/6    0/6  2.1/6\nILC1s                           0.6/11   0/11   0/11 5.4/11\nILC2s                              0/7  0.2/7    0/7  2.6/7\nILC3                               0/5  0.7/5    0/5    2/5\nMast cells                         0/3    0/3    0/3    0/3\nStroma/glia                      0.1/7  3.4/7  0.4/7  0.3/7\nCD36 endothelial                   0/2  0.2/2    0/2  0.1/2\nFibroblast                       0.1/6  1.6/6  0.1/6  0.7/6\nNeutrophils                      0.8/2  0.3/2    0/2  0.9/2\n\n\n\ncluster_data <- obj@cluster_data\n\n######## This is the best: cosine dissimilarity\nMatrix <- as.matrix(t(cluster_data))\nsim <- Matrix / sqrt(rowSums(Matrix * Matrix))\nsim <- sim %*% t(sim)\nD_sim <- as.dist(1 - sim)\ntree <- hclust(D_sim,method = \"ward.D2\")\n\n\ndend <- as.dendrogram(tree)\n#colnames(df) <- str_remove_all(colnames(df), pattern = \"cl.\")\ncut = cutree(tree, k = 9)\ndend =branches_color(dend,k=9,col=c(\"#4DBBD5FF\",\"#91D1C2FF\",\"#E64B35FF\",\"gray80\",\"#3C5488FF\",\"#F39B7FFF\",\"gray80\"),groupLabels = T)\n\nWarning in get_col(col, k): Length of color vector was shorter than the number\nof clusters - color vector was recycled\n\ndend =color_labels(dend,k=9)\n\nplot(dend)\n\n\n\n\n\ncol_fun = colorRamp2(c(0, 1), c( \"lightblue\", \"red\"))\nHeatmap(df, rect_gp = gpar(col = \"white\", lwd = 1),\n        cluster_rows = F,\n        #cluster_columns = FALSE,\n        show_heatmap_legend = F,\n         col = col_fun,\n        column_dend_height = unit(4, \"cm\"),\n        row_dend_width\n        = unit(4, \"cm\"),\n        #width =  unit(24, \"cm\"),\n        #height = unit(6, \"cm\"),\n        cluster_columns = dend,\n        row_names_gp = gpar(fontsize = 7),\n        column_names_gp = gpar(fontsize = 7),\n        cell_fun = function(j, i, x, y, width, height, fill) {\n        grid.text(sprintf(\"%.1f\", df[i, j]), x, y, gp = gpar(fontsize = 5))\n}#,\n#left_annotation = rowAnnotation(foo = anno_block(gp = gpar(fill = 2:4),\n #       labels = c(\"group1\", \"group2\", \"group3\",\"\",\"\",\"\",\"\"), \n#        labels_gp = gpar(col = \"white\", fontsize = 10))),\n#    row_km = 7\n)\n\nWarning: The input is a data frame-like object, convert it to a matrix.\n\n\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following object is masked from 'package:testthat':\n\n    matches\n\n\nThe following object is masked from 'package:gridExtra':\n\n    combine\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(stringr)\n\n#clusters <- colnames(obj@cluster_data)\n\n\ncell.metadata <- srt@meta.data\ncell.metadata <- cbind(cell.metadata,obj@nu[rownames(cell.metadata)])\ncolnames(cell.metadata)[dim(cell.metadata)[2]] <-  \"nu\"\n\n\nif (!(all(unique(cell.metadata$cotan) %in% unique(obj@clusters)) &\n    all(unique(obj@clusters) %in% unique(cell.metadata$cotan))) | \n    any(is.na(cell.metadata$cotan))) {\n  print(\"Problems\")\n  \n}\n\n\nclusters <- t(table(cell.metadata[,c(\"orig.ident\",\"cotan\")]))\nclusters <- as.data.frame(clusters)\nclusters$cotan <- paste0(\"cl.\",clusters$cotan)\n\nclusters$nu_mean <- NA\nfor (cl in unique(clusters$cotan)) {\n  cln <- str_split(cl,pattern = \"[.]\",simplify = T)[2]\n  for (sp in unique(clusters$orig.ident)) {\n    clusters[clusters$cotan == cl & clusters$orig.ident == sp,]$nu_mean <- \n      mean(cell.metadata[cell.metadata$orig.ident == sp & cell.metadata$cotan == cln,]$nu)\n  }\n}\n\nclusters$cotan <- factor(clusters$cotan,levels = labels(dend))\nggplot(clusters, aes(x = cotan, y = Freq, fill = orig.ident)) +  # Create stacked bar chart\n  geom_bar(stat = \"identity\",position = \"dodge\")+\n  geom_text(aes(label = round(nu_mean,digits=1)), position=position_dodge(width=0.5), vjust=-0.5) +\n  theme(legend.position = \"none\") \n\nWarning: Removed 7 rows containing missing values (geom_text)."
  }
]