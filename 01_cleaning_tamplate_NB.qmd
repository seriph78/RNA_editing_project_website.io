---
title: "Cleaning tamplate notebook"
editor: visual
execute: 
  freeze: true
---

Last compiled

```{r}
today <- Sys.Date()
format(today, format = "%A %d %B %Y")
```

```{r}
#library(COTAN)
#library(data.table)
#library(Matrix)
#library(ggrepel)
#library(factoextra)
#library(Rtsne)
#library(utils)
#library(plotly)
#library(tidyverse)
#library(htmlwidgets)
#library(MASS)
#library(Seurat)
#library(dendextend)
```

Import data:

```{r}

sample.id = "test"

```

Define output diretory:

```{r}
out_dir <- paste(root,"/data/02_cleaned_data/")
```

## General cleaning

We want to remove cell doublets or multiplets and low quality or dying cells (with too high mtRNA percentage).

### By library sizes

The next plot shows the library size of each cell in a violin and box plot.

```{r}
library.size.plot(obj,split.pattern = "[-]",n.col = 2)
```

We can subset and drop the unwanted cell by library size.

```{r}
sizes <- Matrix::colSums(obj@raw)

obj <- drop.genes.cells(object = obj,cells = names(sizes[sizes > 2000]))

library.size.plot(obj,split.pattern = "[-]",n.col = 2)
```

```{r}
sizes <- Matrix::colSums(obj@raw)

obj <- drop.genes.cells(object = obj,cells = names(sizes[sizes > 1500]))

library.size.plot(obj,split.pattern = "[-]",n.col = 2)
```

```{r}
ECD.plot(obj,y_cut = 12)

```

### By mitochondrial gene percentage

We will next have a look the the percentage of reads coming from mitochondrial genes. This can help to drop dying cells: these cells will have a percentage of mitochondrial reads particularly high.

```{r}
df <- mitochondrial.percentage.plot(obj,split.pattern = "[-]",n.col = 2,gene.prefix = "^MT-")

df$plot
```

```{r}
sizes <- df$sizes
obj <- drop.genes.cells(object = obj,cells = rownames(sizes[sizes$mit.percentage > 3,]))

df <- mitochondrial.percentage.plot(obj,split.pattern = "[-]",n.col = 2,gene.prefix = "^MT-")

df$plot
```

### Gene and library size scatter plot

```{r}
scatter.plot(obj = obj,split.pattern = "[-]",n.col = 2)
```

```{r}
print(paste("Condition ", sample.id ,sep = ""))
#--------------------------------------
n_cells = length(get.cell.size(object = obj))
print(paste("n cells", n_cells, sep = " "))

n_it = 1
```

## COTAN specific data cleaning

First, we create a directory to store all information regarding the data cleaning.

```{r}
if(!file.exists(out_dir)){
  dir.create(file.path(out_dir))
}

if(!file.exists(paste(out_dir,"cleaning", sep = ""))){   
  dir.create(file.path(out_dir, "cleaning"))
}
```

```{r}
ttm = clean(obj)

obj = ttm$object

ttm$pca.cell.2
```

```{r}
ttm$genes.plot
```

Run this when B cells need to be removed.

```{r eval=TRUE, include=TRUE}

ttm$pca.cell.2
ttm$genes.plot


if (length(ttm$cl1) < length(ttm$cl2)) {
  to_rem = ttm$cl1
}else{
  to_rem = ttm$cl2
}

obj = drop.genes.cells(object = obj,genes = c(),cells = to_rem)

gc()

ttm = clean(obj)
obj = ttm$object

ttm$pca.cell.2

```

```{r}
ttm$genes.plot
```

Run this only in the last iteration, instead of the previous code, when the B cells group has not been removed

```{r}
ttm$pca.cell.2
```

```{r}
ttm$genes.plot
```

```{r}
ttm$genes.plot
```

To color the PCA based on cells' RNA extraction efficiency

```{r}
ttm$UDE.plot
```

UDE (color) should not correlate with principal components! This is very important. The next part is used to remove the cells with efficiency too low.

```{r}
nu_df = data.frame("nu"= sort(get.nu(obj)), "n"=c(1:length(get.nu(obj))))

ggplot(nu_df, aes(x = n, y=nu)) + 
    geom_point(colour = "#8491B4B2", size=1)
    #my_theme #+ ylim(0,1) + xlim(0,70)

```

We can zoom on the smallest values and, if we detect a clear elbow, we can decide to remove the cells.

```{r}
yset = 0.38#threshold to remove low UDE cells
plot.ude <- ggplot(nu_df, aes(x = n, y=nu)) + 
    geom_point(colour = "#8491B4B2", size=1) + 
     ylim(0,1) + xlim(0,400) +
    geom_hline(yintercept=yset, linetype="dashed", color = "darkred") +
    annotate(geom="text", x=200, y=0.25, 
             label=paste("to remove cells with nu < ",yset,sep = " "), 
             color="darkred", size=4.5)

plot.ude
```

We also save the defined threshold in the metadata and re-run the estimation

```{r}
obj = add.row.to.meta(obj,c("Threshold low UDE cells:",yset)) 
to_rem = rownames(nu_df[which(nu_df$nu < yset),])
obj = drop.genes.cells(object = obj, genes = c(),cells =  to_rem)
ttm = clean(obj)
obj = ttm$object
ttm$pca.cell.2
```

```{r}
saveRDS(obj,paste0(out_dir,sample.id,"_obj_cotan.RDS"))
```

##### Session info

```{r}
sessionInfo()
```
