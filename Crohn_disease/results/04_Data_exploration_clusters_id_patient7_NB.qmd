---
title: "Data exploration patient 7"
editor: visual
---

```{r}
library(grid)
library(gridExtra)
library(viridis)
library(ggplot2)
library(stringr)
library(dendextend)
devtools::load_all("../../../COTAN/")
```

# Ileum samples

```{r}
out_dir <- "../../Crohn_disease/data/04_cluster_identification/"
sample.id = "patient7_ileum"

obj <- readRDS(paste0("../../Crohn_disease/data/03_clustred_data/",sample.id,"_merged_cotan.RDS"))
#obj <- readRDS(paste0("../../Crohn_disease/data/03_clustred_data/",sample.id,".cotan.clustered.RDS"))
```

cluster assignment with expression increment



```{r}
expression.cl <- read.csv(paste0(out_dir,sample.id,"_expression_clusters.csv"),row.names = 1)
markers <- readxl::read_excel("../../Marker_genes.xlsx",sheet = 1)
markers <- as.list(markers)
markers <- markers[2:length(markers)]
for (nv in names(markers)) {
  markers[[nv]] <- unique(markers[[nv]][!is.na(markers[[nv]])])
}

COEX.markers <- extract.coex(object = obj,genes = unlist(markers)[unlist(markers,) %in% rownames(obj@raw)])

```

```{r}
good.markers <- NA
for (v in colnames(COEX.markers)) {
  max.coex <- max(COEX.markers[,v])
  if (max.coex >= 0.4) {
    #print(paste0(v," max coex ",max.coex))  
    good.markers <- c(good.markers,v)
  }
}

for (m in names(markers)) {
  markers[[m]] <- markers[[m]][markers[[m]] %in% good.markers]
}


to.keep <- NA
for (v in 1:length(markers)) {
  #print(markers[[v]])
  if (length(markers[[v]])>0) {
    to.keep <- c(to.keep,v)
  }
}
to.keep <- to.keep[!is.na(to.keep)]

markers <- markers[to.keep]
markers
```

```{r}
df <- as.data.frame(matrix(nrow = length(names(markers)),ncol = ncol(expression.cl)))
rownames(df) <- names(markers)
colnames(df) <- colnames(expression.cl)
df2 <- df

teta <- -1/0.1 * (log(0.25))
#not_ass_clusters <- NA
for (ro in colnames(df)) {
  for (m in names(markers)) {
    #print(m)
    #pv <- p_value[unlist(markers[[m]]),ro]
    #co <- obj@cluster_data[unlist(markers[[m]]),ro]
    ex <- expression.cl[rownames(expression.cl) %in% markers[[m]],ro]
    ex[ex < 0 & !is.na(ex)] <- 0
    
    ex <- 1-exp(- teta * ex)
    n.markers <- sum(rownames(obj@raw) %in% markers[[m]])
    df[m,ro] <- sum(ex,na.rm = T)/n.markers
    df2[m,ro]<- paste0(round(sum(ex,na.rm = T),digits = 1),"/",n.markers)
  }
}
#write.csv(df,file = paste(out_dir,sample.id,"_markers_clusters_expression.csv", sep = ""))

df <- round(df,digits = 2)
df <- df[,2:ncol(df)]
df2
```

```{r}
cluster_data <- obj@cluster_data

######## This is the best: cosine dissimilarity
Matrix <- as.matrix(t(cluster_data))
sim <- Matrix / sqrt(rowSums(Matrix * Matrix))
sim <- sim %*% t(sim)
D_sim <- as.dist(1 - sim)
tree <- hclust(D_sim,method = "ward.D2")

```

```{r}
dend <- as.dendrogram(tree)
#colnames(df) <- str_remove_all(colnames(df), pattern = "cl.")
cut = cutree(tree, k = 9)
dend =branches_color(dend,k=9,col=c("#4DBBD5FF","#91D1C2FF","#E64B35FF","gray80","#3C5488FF","#F39B7FFF","gray80"),groupLabels = T)
dend =color_labels(dend,k=9)
```

```{r,fig.width=15}
col_fun = colorRamp2(c(0, 1), c( "lightblue", "red"))
Heatmap(df, rect_gp = gpar(col = "white", lwd = 1),
        cluster_rows = F,
        #cluster_columns = FALSE,
        show_heatmap_legend = F,
         col = col_fun,
        column_dend_height = unit(4, "cm"),
        #width =  unit(24, "cm"),
        #height = unit(6, "cm"),
        cluster_columns = dend,
        row_names_gp = gpar(fontsize = 7),
        column_names_gp = gpar(fontsize = 7),
        cell_fun = function(j, i, x, y, width, height, fill) {
        grid.text(sprintf("%.1f", df[i, j]), x, y, gp = gpar(fontsize = 5))
})
```
