---
title: "Data exploration patient 5"
editor: visual
execute: 
  freeze: false
---

```{r, echo= FALSE}
library(grid)
library(gridExtra)
library(viridis)
library(ggplot2)
library(stringr)
library(dendextend)
devtools::load_all("../../../COTAN/")
```

# Ileum samples

```{r}
today <- Sys.Date()
format(today, format = "%A %d %B %Y")
```

```{r}
out_dir <- "../../Crohn_disease/data/04_cluster_identification/"
sample.id = "patient5_ileum"

obj <- readRDS(paste0("../../Crohn_disease/data/03_clustred_data/patient5_ileum.clustered.merged.cotan.RDS"))
obj <- as(obj,"COTAN")
ISG.genes <- read.csv("../../ISG_fixed.txt",header = T)
colnames(ISG.genes) <- "genes"
```

Number of initial genes

```{r}
dim(ISG.genes)

```

Detected ISG genes in the sample

```{r}
ISG.genes <- ISG.genes[ISG.genes$genes %in% getGenes(obj), ,drop = FALSE]
dim(ISG.genes)
```

Check the ISG genes with the GDI plots

```{r}
GDI.data <- calculateGDI(objCOTAN = obj)
GDI.data$genes <- rownames(GDI.data)
ggplot(GDI.data[rownames(GDI.data) %in% ISG.genes,],aes(sum.raw.norm, GDI)) + geom_point() +
  geom_text_repel(data=subset(GDI.data[rownames(GDI.data) %in% ISG.genes,], 
                              sum.raw.norm > 9 ), aes(label = genes))+
  geom_hline(yintercept=1.5, linetype="dashed", color = "red")
```

```{r}
ISG.genes <- ISG.genes[!ISG.genes$genes %in% rownames(GDI.data[GDI.data$GDI < 1.5,]),]
length(ISG.genes)
```

cluster assignment with expression increment

```{r}
expression.cl <- read.csv(paste0(out_dir,sample.id,"_expression_clusters.csv"),row.names = 1)
markers <- readxl::read_excel("../../Marker_genes.xlsx",sheet = 5)
markers <- as.list(markers)
markers <- markers[2:length(markers)]
for (nv in names(markers)) {
  markers[[nv]] <- unique(markers[[nv]][!is.na(markers[[nv]])])
}

#markers$ISG <- ISG.genes

#COEX.markers <- getGenesCoex(obj,genes = unlist(markers)[unlist(markers,) %in% getGenes(obj)])
score.df <- geneSetEnrichment(objCOTAN = obj,
                              genes = markers, 
                              expression.cl = expression.cl)
```

```{r}
score.ISG <- geneSetEnrichment(objCOTAN = obj,
                              genes = list("ISG"=ISG.genes), 
                              expression.cl = expression.cl)
score.df <- rbind(score.df,score.ISG)
```

```{r, echo=FALSE}
# good.markers <- NA
# for (v in colnames(COEX.markers)) {
#   max.coex <- max(COEX.markers[,v])
#   if (max.coex >= 0.5) {
#     #print(paste0(v," max coex ",max.coex))  
#     good.markers <- c(good.markers,v)
#   }
# }
# 
# for (m in names(markers)) {
#   markers[[m]] <- markers[[m]][markers[[m]] %in% good.markers]
# }
# 
# 
# to.keep <- NA
# for (v in 1:length(markers)) {
#   #print(markers[[v]])
#   if (length(markers[[v]])>0) {
#     to.keep <- c(to.keep,v)
#   }
# }
# to.keep <- to.keep[!is.na(to.keep)]
# 
# markers <- markers[to.keep]
# markers
```

```{r}
score.df[,c("N. detected","N. total")]
```

```{r}
cluster_data <- getClusterizationData(obj)[["coex"]]

######## This is the best: cosine dissimilarity
Matrix <- as.matrix(t(cluster_data))
sim <- Matrix / sqrt(rowSums(Matrix * Matrix))
sim <- sim %*% t(sim)
D_sim <- as.dist(1 - sim)
tree <- hclust(D_sim,method = "ward.D2")
plot(tree)
```

```{r}
dend <- as.dendrogram(tree)
#colnames(df) <- str_remove_all(colnames(df), pattern = "cl.")
cut = cutree(tree, k = 9)
dend =branches_color(dend,k=9,col=c("#4DBBD5FF","#91D1C2FF","#E64B35FF","gray80","#3C5488FF","#F39B7FFF","gray80"),groupLabels = T)
dend =color_labels(dend,k=9)

plot(dend)
```

```{r, echo=FALSE}
df.t <- t(score.df[,1:(ncol(score.df)-3)])

df3 <- as.data.frame(table(getClusterizationData(obj)[[1]]))
Freq <- df3$Freq
names(Freq) <- as.character(df3$Var1)

#Freq <- Freq[labels(dend)]
Freq <- Freq[rownames(df.t)]
Freq <- Freq[!is.na(Freq)]

MetadataCells <- getMetadataCells(obj)
UDE <- setNames(rep(NA,length(Freq)), as.character(unique(MetadataCells[,"CL_clusters"])))


for (cl in unique(MetadataCells[,"CL_clusters"])) {
  mean.UDE <- mean(MetadataCells[MetadataCells$CL_clusters == cl,]$nu)
  #print(paste0(cl," ",mean.UDE))
 UDE[as.character(cl)] <- mean.UDE
}
UDE <- UDE[rownames(df.t)]
UDE <- UDE[!is.na(UDE)]
```

```{r, echo=FALSE}
ha = rowAnnotation(cell.number = anno_numeric(Freq,
        bg_gp = gpar(fill = "orange", col = "black"),labels_gp = gpar(fontsize = 12)), annotation_name_rot = 0)

hb = rowAnnotation(UDE.mean = anno_numeric(round(UDE,digits = 2),
        bg_gp = gpar(fill = "green", col = "black"),align_to = "right",labels_gp = gpar(fontsize = 12)),annotation_name_rot = 0)

```

```{r,fig.height=15}
col_fun = colorRamp2(c(0, 1), c( "lightblue", "red"))
Heatmap(df.t, rect_gp = gpar(col = "white", lwd = 1),
        #cluster_rows = F,
        cluster_columns = FALSE,
        show_heatmap_legend = F,
        col = col_fun,
        width =  unit(28, "cm"),
        row_dend_width = unit(8, "cm"),
        #height = unit(6, "cm"),
        cluster_rows = dend,
        column_names_gp = gpar(fontsize = 11),
      row_names_gp = gpar(fontsize = 9),
        cell_fun = function(j, i, x, y, width, height, fill) {
        grid.text(sprintf("%.1f", df.t[i, j]), x, y, gp = gpar(fontsize = 9))
},
right_annotation = ha,
left_annotation = hb
)
```

```{r}
sessionInfo()
```
